[{"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/_app.tsx":"1","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/api/hello.ts":"2","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/clients/[client_id].tsx":"3","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/helpers/getFillerStyle.tsx":"4","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/login/LoginForm.tsx":"5","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/Breadcrumbs.tsx":"6","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/Logo.tsx":"7","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/Navigation.tsx":"8","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/NavigationButtons.tsx":"9","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/NavigationLinks.tsx":"10","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Header.tsx":"11","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/MachinesTable.tsx":"12","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Popup.tsx":"13","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Statistics.tsx":"14","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/StorageSystem.tsx":"15","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/StorageSystemDashboard.tsx":"16","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Summary.tsx":"17","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/impressum.tsx":"18","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/index.tsx":"19","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/machines/[id].tsx":"20","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/edit-machine/[id].tsx":"21","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/new-machine.tsx":"22","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/shift-calendar.tsx":"23","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/shift-manager.tsx":"24","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data.tsx":"25","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/annual-evaluation.tsx":"26","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/annual-revenues.tsx":"27","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/co2-evaluation.tsx":"28","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/control-documents.tsx":"29","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting.tsx":"30","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/storage-systems.tsx":"31"},{"size":1421,"mtime":1678205195383,"results":"32","hashOfConfig":"33"},{"size":307,"mtime":1678205195383,"results":"34","hashOfConfig":"33"},{"size":4391,"mtime":1679043366085,"results":"35","hashOfConfig":"33"},{"size":714,"mtime":1678205195384,"results":"36","hashOfConfig":"33"},{"size":3128,"mtime":1678205195384,"results":"37","hashOfConfig":"33"},{"size":2835,"mtime":1678205195384,"results":"38","hashOfConfig":"33"},{"size":286,"mtime":1678205195384,"results":"39","hashOfConfig":"33"},{"size":409,"mtime":1678205195384,"results":"40","hashOfConfig":"33"},{"size":454,"mtime":1678205195384,"results":"41","hashOfConfig":"33"},{"size":1628,"mtime":1678205195384,"results":"42","hashOfConfig":"33"},{"size":344,"mtime":1678205195384,"results":"43","hashOfConfig":"33"},{"size":3251,"mtime":1678205195384,"results":"44","hashOfConfig":"33"},{"size":7774,"mtime":1679046256215,"results":"45","hashOfConfig":"33"},{"size":1288,"mtime":1678205195384,"results":"46","hashOfConfig":"33"},{"size":1727,"mtime":1678205195384,"results":"47","hashOfConfig":"33"},{"size":24673,"mtime":1678205195385,"results":"48","hashOfConfig":"33"},{"size":611,"mtime":1678205195385,"results":"49","hashOfConfig":"33"},{"size":2068,"mtime":1678205195385,"results":"50","hashOfConfig":"33"},{"size":371,"mtime":1678205195385,"results":"51","hashOfConfig":"33"},{"size":9478,"mtime":1679043466088,"results":"52","hashOfConfig":"33"},{"size":17729,"mtime":1678205195385,"results":"53","hashOfConfig":"33"},{"size":17837,"mtime":1678205195385,"results":"54","hashOfConfig":"33"},{"size":95784,"mtime":1678205195386,"results":"55","hashOfConfig":"33"},{"size":8562,"mtime":1678205195386,"results":"56","hashOfConfig":"33"},{"size":32045,"mtime":1679045785984,"results":"57","hashOfConfig":"33"},{"size":12700,"mtime":1679043500386,"results":"58","hashOfConfig":"33"},{"size":6765,"mtime":1678205195386,"results":"59","hashOfConfig":"33"},{"size":2547,"mtime":1678205195386,"results":"60","hashOfConfig":"33"},{"size":4950,"mtime":1678205195386,"results":"61","hashOfConfig":"33"},{"size":2346,"mtime":1678205195386,"results":"62","hashOfConfig":"33"},{"size":7042,"mtime":1678205195386,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"43kxvp",{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/_app.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/api/hello.ts",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/clients/[client_id].tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/helpers/getFillerStyle.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/login/LoginForm.tsx",["167","168"],[],"import {useState} from \"react\";\n\nconst credentials =\n    {\n        username: \"user1@e-findo.de\",\n        password: \"pass1\"\n    }\n\nconst LoginForm = ({setIsSubmitted}: any) => {\n    const [error, setError] = useState(0);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleSubmit = (event: any) => {\n        event.preventDefault();\n        if (email == credentials.username && password == credentials.password)\n        {\n            setIsSubmitted(true)\n        }\n        else {\n            setError(1)\n        }\n    };\n\n    return(\n        <div id=\"content-page\" className=\"mx-10 p-10\">\n            <img className=\"mb-7 m-auto h-40\" src=\"/logo-1.svg\"/>\n            <div className=\"flex flex-col items-center justify-center px-6 py-8 lg:py-0\">\n                <div\n                    className=\"w-full rounded-lg shadow md:mt-0 sm:max-w-md xl:p-0\">\n                    <div className=\"p-6 space-y-3 sm:p-8\">\n                        <h1 className=\"font-bold text-lg\">Sign in to your account</h1>\n                        <p className=\"text-red-500 text-md\">\n                            {error === 1\n                            ? \"Invalid username or password.\"\n                            : \"\"}\n                        </p>\n                        <form className=\"space-y-4 md:space-y-6\" action=\"#\" onSubmit={handleSubmit}>\n                            <div>\n                                <label htmlFor=\"email\" className=\"block mb-2 text-sm font-medium\n                            text-gray-900 dark:text-white\">\n                                    Your email</label>\n                                <input type=\"email\" name=\"email\" id=\"email\" className=\"bg-gray-50 border\n                             border-gray-300 text-gray-900 sm:text-sm rounded-lg w-full p-2.5\"\n                                       placeholder=\"name@company.com\" required\n                                       onChange={(e) => setEmail(e.target.value)}/>\n                            </div>\n                            <div>\n                                <label htmlFor=\"password\"\n                                       className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">\n                                    Password</label>\n                                <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\"\n                                       className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg\n                                   w-full p-2.5 mb-2\" required\n                                       onChange={(e) => setPassword(e.target.value)}/>\n                            </div>\n                            <button type=\"submit\" className=\"w-full text-white border font-medium rounded-lg\n                                text-sm px-5 py-2.5 text-center bg-accent-color-2 hover:bg-accent-color-3\">\n                                Sign in</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginForm","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/Breadcrumbs.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/Logo.tsx",["169"],[],"import Link from \"next/link\";\nconst Logo = () => {\n    return (\n        <div id=\"logo\" className=\"mx-5 my-auto\" >\n            <Link href=\"/\">\n                <a><img className=\"ml-5 h-10\" src=\"/logo-1.png\" alt=\"logo\"/></a>\n            </Link>\n        </div>\n    )\n}\n\nexport default Logo","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/Navigation.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/NavigationButtons.tsx",["170","171"],[],"const NavigationButtons = ({setIsSubmitted}: any) => {\n    return(\n        <div id=\"navigation-buttons\" className=\"flex ml-auto space-x-2 mr-10\">\n            <button className=\"flex\" onClick={()=>{setIsSubmitted(false)}}>\n                <img className=\"m-auto mr-1.5 \" src=\"/power-on-svgrepo-com 1.svg\" width=\"15\"/>\n                <span className=\"text-xs m-auto mr-10\">Ausloggen</span></button>\n        </div>\n    )\n}\n\nexport default NavigationButtons","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/navigation/NavigationLinks.tsx",["172","173"],[],"import { useRouter } from 'next/router'\n\nimport Link from \"next/link\";\n\nconst navigationLinks = [\n    {\n        name: \"Start\",\n        link: \"/\",\n        image: \"/home-svgrepo-com.svg\"\n    },\n    {\n        name: \"Stammdaten\",\n        link: \"/master-data\",\n        image: \"\"\n    },\n    //{\n    //    name: \"Lagersysteme\",\n    //    link: \"/storage-systems\",\n    //    image: \"\"\n    //},\n    {\n        name: \"Reporting\",\n        link: \"/reporting\",\n        image: \"\"\n    },\n    {\n        name: \"Kalkulation\",\n        link: \"/calculation\",\n        image: \"\"\n    },\n    {\n        name: \"News\",\n        link: \"/news\",\n        image: \"\"\n    },\n    {\n        name: \"Impressum\",\n        link: \"/impressum\",\n        image: \"\"\n    }\n]\n\nconst NavigationLinks = () => {\n    const router = useRouter()\n        return (\n            <div id=\"links\" className=\"ml-10 text-xs flex\">\n                {navigationLinks.map((link) =>\n                    <div className=\"flex m-auto\" key={link.name} id={link.name}>\n                        <Link key={link.name} href={link.link}>\n                            <a className=\"\">\n                                <div className=\"flex px-3 py-1\">\n                                    <img className=\"mr-1.5 mb-1.5 h-4\" src={link.image}/>\n                                    <span className=\"m-auto\">\n                                        {link.name}\n                                    </span>\n                                </div>\n                            </a>\n                        </Link>\n                    </div>\n                )}\n            </div>\n        )\n}\n\nexport default NavigationLinks","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Header.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/MachinesTable.tsx",["174","175"],[],"import getFillerStyle from \"../helpers/getFillerStyle\";\nimport Link from \"next/link\";\n\nconst machineList = [\n    {\n        type: \"esb\",\n        id: \"4712\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 79,\n        plan_date: \"17.10.2022 02:31\",\n        pickup_date: \"1/1/2022 01:00\",\n        netto: 5880\n    },\n    {\n        type: \"bw\",\n        id: \"9001 CMS-A\",\n        max_netto: 9000,\n        material: \"Eisenspäne, normal\",\n        load: 31,\n        plan_date: \"21/12/2022 02:26\",\n        pickup_date: \"4/4/2022 01:00\",\n        netto: 2760\n    },\n    {\n        type: \"bw\",\n        id: \"9002 CMS-A\",\n        max_netto: 9000,\n        material: \"Eisenspäne, normal\",\n        load: 22,\n        plan_date: \"noch keine Füllung\",\n        pickup_date: \"-\",\n        netto: 1960\n    },\n    {\n        type: \"esb\",\n        id: \"4711\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 0,\n        plan_date: \"nicht ermittelbar\",\n        pickup_date: \"-\",\n        netto: 120\n    },\n    {\n        type: \"esb\",\n        id: \"4711\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 0,\n        plan_date: \"nicht ermittelbar\",\n        pickup_date: \"-\",\n        netto: 120\n    },\n    {\n        type: \"esb\",\n        id: \"4711\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 0,\n        plan_date: \"nicht ermittelbar\",\n        pickup_date: \"-\",\n        netto: 120\n    },\n]\n\nconst MachinesTable = ({setMachineID, setPickupDate}: any) => {\n    return(\n        <tbody className=\"bg-gray-50\">\n        {machineList.map((machine) =>\n            <tr key={machine.id} className=\"text-xs border-t\">\n                <td>\n                    {machine.type}: <span className=\"underline\">\n                        <Link href={\"/machines/\" + machine.id}>\n                            {machine.id}\n                        </Link></span><br/>\n                    <span>{machine.max_netto}</span></td>\n                <td>{machine.material}</td>\n                <td className=\"flex\">\n                    <div className=\"border border-black bg-white w-32 mr-1.5\">\n                        <div className={getFillerStyle(machine.load)}/>\n                    </div>\n                    {machine.load}%</td>\n                <td>{machine.plan_date}<br/>\n                    <span id={\"pickup_date_\" + machine.id}\n                        className={machine.pickup_date != \"-\"\n                                    ? \"flex underline\"\n                                    : \"flex\"}>\n                        {machine.pickup_date}\n                        <button onClick={() => {setMachineID(machine.id);\n                        setPickupDate(new Date(machine.pickup_date))}}>\n                            <img\n                            src={machine.pickup_date != \"-\"\n                            ? \"/icon_fragezeichen 1.svg\"\n                            : \"\"\n                        }/>\n                        </button>\n                    </span>\n                </td>\n                <td>{machine.netto}</td>\n            </tr>\n        )}\n        </tbody>\n    )\n}\n\nexport default MachinesTable","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Popup.tsx",["176","177","178","179"],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Statistics.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/StorageSystem.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/StorageSystemDashboard.tsx",["180","181","182","183","184","185","186","187"],[],"import {useEffect, useState} from \"react\";\nimport Link from \"next/link\";\nimport getFillerStyle from \"../helpers/getFillerStyle\";\nimport API from \"axios\";\nimport moment from \"moment\";\nimport Popup from \"./Popup\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst StorageSystemDashboard = () => {\n    const [machinesData, setMachinesData] = useState<any>();\n    const [shifts, setShift] = useState<any>();\n    const [machineID, setMachineID] = useState<any>(\"\");\n    const [plannedDates, setPlannedDates] = useState<[]>([]);\n    const [pickupDate, setPickupDate] = useState<any>(\"\");\n    const [pickupDates, setPickupDates] = useState<[]>([]);\n    const [isDateConfirmed, setIsDateConfirmed] = useState<any>(\"\");\n    const [newPickupDates, setNewPickupDates] = useState<[]>([]);\n    const [areDatesConfirmed, setAreDatesConfirmed] = useState<[]>([]);\n    const [radioConfirmed, setRadioConfirmed] = useState<any>(\"\");\n\n    useEffect(() => {\n        let apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines';\n\n        API.get(apiName)\n            .then((response) => {\n                setMachinesData(response.data.Items\n                    .filter((machine: { client: string; }) =>\n                        machine.client == \"e-findo GmbH\"));\n            })\n            .catch((error) => {\n                console.log(error); //\n            });\n\n        API.get('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/shifts')\n            .then((response) => {\n                setShift(\n                    response.data.Items\n                        .filter( (shift: any) => shift.shift_id == 10000 )[0].shifts\n                );\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n    }, []);\n\n    let SHIFT_CALENDAR = {\n        'Sunday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Monday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Tuesday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Wednesday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Thursday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Friday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Saturday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n    };\n    const daysOfWeek = {\n        0: 'Sunday',\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday'\n    }\n    function capitalizeDays(shiftCalendar: any) {\n        const days = {\n            'sunday': 'Sunday',\n            'monday': 'Monday',\n            'tuesday': 'Tuesday',\n            'wednesday': 'Wednesday',\n            'thursday': 'Thursday',\n            'friday': 'Friday',\n            'saturday': 'Saturday',\n        };\n\n        const capitalizedCalendar = {};\n        for (const day in shiftCalendar) {\n            // @ts-ignore\n            capitalizedCalendar[days[day]] = shiftCalendar[day];\n        }\n\n        return capitalizedCalendar;\n    }\n\n    const returnFirstShift = (taskStart: any) => {\n        let currentDate = moment(taskStart.format('L'))\n        // @ts-ignore\n        for (let i = 0 ; i < 7 ; i++) {\n            // @ts-ignore\n            let todayShifts = SHIFT_CALENDAR[daysOfWeek[currentDate.day()]]\n            //figure out first shift\n            if (todayShifts.shift1.start != \"\") {\n                let shift1StartTime = todayShifts.shift1.start\n                let shift1EndTime = todayShifts.shift1.end\n                let shift1Start = moment(currentDate.format('L') + ' ' + shift1StartTime)\n                let shift1End = moment(currentDate.format('L') + ' ' + shift1EndTime)\n                if (shift1End.isBefore(shift1Start)) {\n                    shift1End.add(1, 'day')\n                }\n                if (shift1End.isAfter(taskStart)){\n                    return [todayShifts.shift1, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift2.start != \"\") {\n                let shift2StartTime = todayShifts.shift2.start\n                let shift2EndTime = todayShifts.shift2.end\n                let shift2Start = moment(currentDate.format('L') + ' ' + shift2StartTime)\n                let shift2End = moment(currentDate.format('L') + ' ' + shift2EndTime)\n                if (shift2End.isBefore(shift2Start)) {\n                    shift2End.add(1, 'day')\n                }\n                if (shift2End.isAfter(taskStart)){\n                    return [todayShifts.shift2, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift3.start != \"\") {\n                let shift3StartTime = todayShifts.shift3.start\n                let shift3EndTime = todayShifts.shift3.end\n                let shift3Start = moment(currentDate.format('L') + ' ' + shift3StartTime)\n                let shift3End = moment(currentDate.format('L') + ' ' + shift3EndTime)\n                if (shift3End.isBefore(shift3Start)) {\n                    shift3End.add(1, 'day')\n                }\n                if (shift3End.isAfter(taskStart)){\n                    return [todayShifts.shift3, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift4.start != \"\") {\n                let shift4StartTime = todayShifts.shift4.start\n                let shift4EndTime = todayShifts.shift4.end\n                let shift4Start = moment(currentDate.format('L') + ' ' + shift4StartTime)\n                let shift4End = moment(currentDate.format('L') + ' ' + shift4EndTime)\n                if (shift4End.isBefore(shift4Start)) {\n                    shift4End.add(1, 'day')\n                }\n                if (shift4End.isAfter(taskStart)){\n                    return [todayShifts.shift4, currentDate.format('L')]\n                }\n            }\n            currentDate.add(1,'day')\n        }\n    }\n\n    const calculatePlannedDate = (workingHours: any, machineID: any) => {\n        let taskDuration = workingHours*60;\n        let taskStart = moment()\n        // @ts-ignore\n        let [firstShift, firstShiftStartDate] = returnFirstShift(taskStart)\n        let currentDate = moment(taskStart.format('L'))\n        while (taskDuration > 0) {\n            for (let day in SHIFT_CALENDAR) {\n                // @ts-ignore\n                if (day == daysOfWeek[currentDate.day()]) {\n                    // @ts-ignore\n                    let todayShifts = SHIFT_CALENDAR[daysOfWeek[currentDate.day()]]\n\n                    for (let i = 1; i < 5; i++) {\n                        let currentShift = 'shift' + i\n                        if (todayShifts[currentShift].start == \"\") {\n                            continue\n                        }\n                        let shiftStart = moment(currentDate.format('L')\n                            + ' '\n                            + todayShifts[currentShift].start)\n                        let shiftEnd = moment(currentDate.format('L')\n                            + ' '\n                            + todayShifts[currentShift].end)\n                        if (shiftEnd.isBefore(shiftStart)) {\n                            shiftEnd.add(1, 'day')\n                        }\n\n                        if (shiftStart.isAfter(moment(firstShiftStartDate + ' ' + firstShift.start))) {\n                            taskStart = shiftStart\n                        }\n\n                        if ((taskStart.format('LLL') == shiftStart.format('LLL')\n                            || taskStart.isAfter(shiftStart)) && taskStart.isBefore(shiftEnd)) {\n                            let taskEnd = taskStart.clone()\n                            taskEnd.add(taskDuration, 'minutes')\n                            let timeTillShiftEnd = shiftEnd.diff(taskStart) / 3600000 * 60\n                            let timeTillTaskEnd = taskEnd.diff(taskStart) / 3600000 * 60\n\n                            if (timeTillTaskEnd <= timeTillShiftEnd) {\n                                let currentDates = plannedDates\n                                // @ts-ignore\n                                currentDates.push([{\"machineID\": machineID,\n                                \"taskEnd\": taskEnd}])\n                                // @ts-ignore\n                                setPlannedDates(currentDates.flat())\n                                // @ts-ignore\n                                setPickupDates(currentDates.flat())\n\n                                return taskEnd\n                            } else {\n                                taskDuration -= timeTillShiftEnd\n                            }\n                        }\n                    }\n\n                    currentDate.add(1, 'day')\n                }\n            }\n        }\n    }\n\n    if (machinesData && shifts && plannedDates.length == 0) {\n        // @ts-ignore\n        SHIFT_CALENDAR = capitalizeDays(shifts)\n        for (let machine in machinesData) {\n            const machineID = machinesData[machine].machine_id\n            const averageThroughput = machinesData[machine].averageThroughput\n            const currentNetto = machinesData[machine].lastTara\n            const maxNetto = machinesData[machine].maxNetto\n            const workingHours = (maxNetto-currentNetto)/averageThroughput\n            if (averageThroughput != 0) {\n                calculatePlannedDate(workingHours, machineID)\n            }\n        }\n    }\n\n\n    return (\n        <div id=\"storage-system\" className=\"mt-5\">\n              <span className=\"text-xs uppercase font-bold text-gray-500\">\n                  Lagersysteme\n              </span>\n            <div className=\"sm:rounded-lg shadow-md border overflow-auto\">\n                <div className=\"sm:rounded-lg shadow-md border overflow-auto\">\n                    <table className=\"flex-row w-full table-auto\">\n                        <thead>\n                        <tr className=\"text-xs text-gray-500 border-b text-left\">\n                            <th className=\"font-normal\">Masch.-ID<br/>Max Netto</th>\n                            <th className=\"font-normal\">Material</th>\n                            <th className=\"font-normal\">Füllgrad</th>\n                            <th className=\"font-normal\">Plandatum<br/>Abholdatum</th>\n                            <th className=\"font-normal\">Netto (kg)</th>\n                        </tr>\n                        </thead>\n                        <tbody className=\"bg-gray-50\">\n                        {machinesData\n                            ? machinesData.map((machine: any) =>\n                                    <tr key={machine.machine_id} className=\"text-xs border-t\">\n                                        <td>\n                                            {machine.machineType}: <span className=\"underline\">\n                        <Link href={\"/machines/\" + machine.machine_id}>\n                            {machine.machine_id}\n                        </Link></span><br/>\n                                            <span>{machine.maxNetto}</span></td>\n                                        <td>{machine.waretype}</td>\n                                        <td className=\"flex\">\n                                            <div className=\"border border-black bg-white w-32 mr-1.5\">\n\n                                                <div\n                                                    // @ts-ignore\n                                                    className={ (machine.lastIndicate - machine.lastTara) * 100\n                                                    / machine.maxNetto > 0\n                                                    ? getFillerStyle(\n                                                    (machine.lastIndicate - machine.lastTara) * 100\n                                                    / machine.maxNetto\n                                                    )\n                                                    : 0\n                                                }/>\n                                            </div>\n                                            { parseInt(((machine.lastIndicate - machine.lastTara) * 100\n                                                / machine.maxNetto).toFixed(0)) > 0\n                                                ?\n                                                ((machine.lastIndicate - machine.lastTara) * 100\n                                                / machine.maxNetto).toFixed(0)\n                                                : 0}%</td>\n                                        <td>\n                                            {\n                                                <span>\n                                                    { machine.total_working_time != 0 && plannedDates && plannedDates\n                                                            .filter((obj:any) =>\n                                                            {return obj.machineID===machine.machine_id}).length != 0\n                                                        ? plannedDates\n                                                          .filter((obj:any) =>\n                                                            {return obj.machineID===machine.machine_id})\n                                                            .map((plannedDate: any) =>\n                                                                <a key={plannedDate.machineID}>\n                                                                    {plannedDate.taskEnd.format('DD.MM.YYYY HH:mm')}\n                                                                </a>)\n                                                        : \"-\"\n                                                    }<br/>\n                                                    <a className={ machine.total_working_time != 0\n                                                        ? \"underline cursor-pointer flex\"\n                                                        : \"underline pointer-events-none flex\"}\n                                                    onClick={()=>\n                                                    {\n                                                        setMachineID(machine.machine_id)\n                                                        if (machinesData && machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                            .pickup_date != \"\") {\n                                                            setPickupDate(moment(machinesData.filter((obj: any) =>\n                                                            {return obj.machine_id == machine.machine_id})[0].pickup_date))\n                                                        } else if (pickupDates) {\n                                                         setPickupDate(pickupDates\n                                                             .filter((obj:any) =>\n                                                             {return obj.machineID===machine.machine_id})[0]\n                                                             // @ts-ignore\n                                                             .taskEnd)\n                                                        }\n\n                                                        setIsDateConfirmed(machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                            .isDateConfirmed)\n                                                        setRadioConfirmed(machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                            .isDateConfirmed)}\n\n                                                    }>\n                                                    {   newPickupDates && newPickupDates.filter((obj:any) =>\n                                                        {return obj.machine_id == machine.machine_id}).length != 0\n                                                        ? moment(newPickupDates.filter((obj:any) =>\n                                                            // @ts-ignore\n                                                        {return obj.machine_id == machine.machine_id})[0].date)\n                                                            .format('DD.MM.YYYY HH:mm')\n                                                        : machine.total_working_time !=0\n                                                        && pickupDates\n                                                        && pickupDates.length != 0\n                                                        && machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                        .pickup_date == \"\"\n                                                            ? pickupDates\n                                                                .filter((obj:any) =>\n                                                                {return obj.machineID===machine.machine_id})\n                                                                .map((pickupDate: any) =>\n                                                                    <span key={pickupDate.machineID}>\n                                                                        {pickupDate.taskEnd.format('DD.MM.YYYY HH:mm')}\n                                                                    </span>\n                                                                )\n                                                            : machine.total_working_time !=0\n                                                            && machinesData.filter((obj: any) =>\n                                                            {return obj.machine_id == machine.machine_id})[0]\n                                                            .pickup_date != \"\"\n                                                            ? moment(machinesData.filter((obj: any) =>\n                                                                {return obj.machine_id == machine.machine_id})[0]\n                                                                .pickup_date).format('DD.MM.yyyy HH:mm')\n                                                            : \"-\"\n                                                    }\n                                                        {   areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id}).length != 0\n                                                            && areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id})\n                                                            // @ts-ignore\n                                                            .date_confirmed == false\n                                                            ? <img className=\"ml-1\" src=\"/icon_fragezeichen 1.svg\"/>\n                                                            : machine.total_working_time !=0\n                                                            && machine.isDateConfirmed == false\n                                                                    ? <img className=\"ml-1\" src=\"/icon_fragezeichen 1.svg\"/>\n                                                                    :\"\"}\n                                                        {   areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id}).length != 0\n                                                        && areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id})\n                                                            // @ts-ignore\n                                                            .date_confirmed == true\n                                                            ? <img className=\"ml-1\" src=\"/icon_fragezeichen 1.svg\"/>\n                                                            : machine.total_working_time !=0\n                                                            && machine.isDateConfirmed == true\n                                                                ? <img className=\"ml-1\" src=\"/icon_haken 1.svg\"/>\n                                                                :\"\"}\n                                                    </a>\n                                                </span>\n                                            }\n                                        </td>\n                                        <td>{machine.maxNetto}</td>\n                                    </tr>\n                            )\n                            : \"\"\n                        }\n                        </tbody>\n                    </table>\n                    <Popup\n                        machineID={machineID}\n                        pickupDate={pickupDate}\n                        setMachineID={setMachineID}\n                        setPickupDate={setPickupDate}\n                        setPickupDates={setPickupDates}\n                        pickupDates={pickupDates}\n                        machinesData={machinesData}\n                        isDateConfirmed={isDateConfirmed}\n                        setIsDateConfirmed={setIsDateConfirmed}\n                        setNewPickupDates={setNewPickupDates}\n                        newPickupDates={newPickupDates}\n                        areDatesConfirmed={areDatesConfirmed}\n                        setAreDatesConfirmed={setAreDatesConfirmed}\n                        radioConfirmed={radioConfirmed}\n                        setRadioConfirmed={setRadioConfirmed}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default StorageSystemDashboard","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/components/start/Summary.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/impressum.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/index.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/machines/[id].tsx",["188"],[],"import {useRouter} from \"next/router\";\nimport {useEffect, useState} from \"react\";\n\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport DatePicker from \"react-datepicker\";\nimport API from 'axios';\n\nconst MachineStorageHistory = () => {\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const [newEndDate, setNewEndDate] = useState(new Date());\n    const [data, setData] = useState<any[]>([]);\n    const [machinesData, setMachinesData] = useState<any[]>([]);\n\n    useEffect(() => {\n        const apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/items';\n\n        API.get(apiName)\n            .then((response) => {\n                setData(response.data.flat())\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n        const newEndDate = new Date();\n        newEndDate.setDate(endDate.getDate() + 1)\n        newEndDate.setHours(0,0,0,0);\n        setNewEndDate(newEndDate)\n        startDate.setHours(0,0,0,0)\n\n        API.get('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines')\n            .then((response) => {\n                setMachinesData(response.data.Items.filter((item: any) => item.machine_id == pid.id));\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n        console.log(data)//\n\n    },[startDate, endDate]);\n\n    const router = useRouter()\n    const pid = router.query\n\n    const manualTara = () => {\n       // set the isNetto from last item to true\n        let newData = data\n            .filter(item => item.id == pid.id )\n            .filter(item =>\n                new Date(item.timestamp) > startDate &&\n                new Date(item.timestamp) < newEndDate)\n            .sort(function(a: any, b: any){\n                // @ts-ignore\n                return new Date(b.timestamp) - new Date(a.timestamp)\n            })\n        newData[0]['isNetWeight'] = 'true'\n        newData[0]['tareWeight'] = parseInt(newData[0]['indicateWeight'])\n        setData(newData)\n        updateStatus('Container tariert (3)');\n    }\n\n    const sendData = (responseBody: any) => {\n        API.put('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines',\n            responseBody)\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    const updateStatus = (status: string) => {\n        let responseBody = machinesData[0]\n        responseBody.status = status\n        sendData(responseBody)\n    }\n\n    const refreshList = () => {\n        const apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/items';\n\n        API.get(apiName)\n            .then((response) => {\n                setData(response.data.flat())\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n    }\n\n    return(\n        <div id=\"content-page\" className=\"mx-10 p-10\">\n            <p className=\"my-9 text-3xl font-bold\">Übersicht</p>\n            <span className=\"text-sm font-bold\">Status Maschine</span>\n            <div className=\"text-sm flex\">\n                <div className=\"flex space-x-9 mt-4 mb-2\">\n                    <div className=\"flex space-x-2\">\n                        <span className=\"m-auto\">Von:</span>\n                        <DatePicker className=\"shadow-md border text-ce,nter p-0.5 w-full\"\n                                    dateFormat=\"yyyy/MM/dd\"\n                                    selected={startDate}\n                                    onChange={(date:Date) => setStartDate(date)}/>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                        <span className=\"m-auto\">Bis:</span>\n                        <DatePicker className=\"shadow-md border text-center p-0.5 m-0\"\n                                    dateFormat=\"yyyy/MM/dd\"\n                                    selected={endDate}\n                                    onChange={(date:Date) => setEndDate(date)}/>\n                    </div>\n                    <button className=\"p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border\" onClick={()=>{refreshList()}}>Refresh</button>\n                </div>\n            </div>\n            <div className=\"sm:rounded-lg shadow-md border h-72 overflow-auto mt-5\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left text-center\">\n                        <th className=\"font-normal\">Masch.-ID</th>\n                        <th className=\"font-normal\">Typ</th>\n                        <th className=\"font-normal\">Datum erfasst</th>\n                        <th className=\"font-normal\">Brutto</th>\n                        <th className=\"font-normal\">Tara (Log)</th>\n                        <th className=\"font-normal\">Tara (Masch)</th>\n                        <th className=\"font-normal\">Netto (Log)</th>\n                        <th className=\"font-normal\">Netto (Masch)</th>\n                        <th className=\"font-normal\">kg/h</th>\n                        <th className=\"font-normal\">Warenart</th>\n                        <th className=\"font-normal\">Netto</th>\n                        <th className=\"font-normal\">Positiv</th>\n                        <th className=\"font-normal\">Übergew.</th>\n                        <th className=\"font-normal\">Stabil</th>\n                        <th className=\"font-normal\">Print</th>\n                        <th className=\"font-normal\">Printausgabe</th>\n                        <th className=\"font-normal\">Status Maschine</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50 text-center\">\n                    {data !== undefined\n                        ? data\n                            .filter(item => item.id == pid.id )\n                            .filter(item =>\n                                new Date(item.timestamp) > startDate &&\n                                new Date(item.timestamp) < newEndDate)\n                            .sort(function(a: any, b: any){\n                                // @ts-ignore\n                                return new Date(b.timestamp) - new Date(a.timestamp)\n                            })\n                            .map((item: any) =>\n                            <tr key={item.id} className=\"text-xs border-t\">\n                                <td>{item.id}</td>\n                                <td>{item.machineType}</td>\n                                <td>\n                                    {item.timestamp.slice(0,10)},\n                                    {item.timestamp.slice(10,16)}\n                                </td>\n                                <td>{parseInt(item.indicateWeight)} kg</td>\n                                <td>{parseInt(item.tareWeight)} kg</td>\n                                <td></td>\n                                <td className={parseInt(item.indicateWeight) - parseInt(item.tareWeight) < 0 ? 'text-red-500' : ''}>{parseInt(item.indicateWeight) - parseInt(item.tareWeight)} kg</td>\n                                <td></td>\n                                <td>{item.averageThroughput ? item.averageThroughput.toFixed(2) : \"\"}</td>\n                                <td></td>\n                                <td>\n                                    {\n                                        item.isNetWeight == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isPositiveWeight == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isOverweight == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isStable == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isPrintTriggered == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>{item.printContent}</td>\n                                <td>{item.status}</td>\n                            </tr>\n                        )\n                        : \"\"}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default MachineStorageHistory","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/edit-machine/[id].tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/new-machine.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/shift-calendar.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data/shift-manager.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/master-data.tsx",["189"],[],"import {useEffect, useState} from \"react\";\nimport moment from \"moment\";\nimport \"moment-timezone\"\nimport API from \"axios\";\nimport Link from \"next/link\";\nimport getFillerStyle from \"./components/helpers/getFillerStyle\";\nimport Popup from \"./components/start/Popup\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {pick} from \"next/dist/lib/pick\";\n\nconst data = [\n    {\n        client_id: 10279,\n        name: \"Maier GmbH & Co. KG Präzisionstechnik\",\n        zip: \"D-98646\",\n        city: \"Hildburghausen\",\n        street: \"Langer Steg 9\",\n        region: \"Thüringen\",\n        tel: \"+49 (0) 36 85 | 79 18-16\",\n        email: \"a.rappold@maier-praezisionstechnik.de\",\n        spokesperson: \"Annett Rappold\"\n    }\n]\n\nconst MasterData = () => {\n    const [machinesData, setMachinesData] = useState<any>();\n    const [shifts, setShift] = useState<any>();\n    const [machineID, setMachineID] = useState<any>(\"\");\n    const [plannedDate, setPlannedDate] = useState<any>(moment());\n    const [pickupDate, setPickupDate] = useState<any>(\"\");\n    const [shiftsReady, setShiftsReady] = useState<any>(false);\n\n    useEffect(() => {\n        let apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines';\n\n        API.get(apiName)\n            .then((response) => {\n                setMachinesData(response.data.Items\n                    .filter((machine: { client: string; }) =>\n                        machine.client == \"e-findo GmbH\"))\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n        API.get('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/shifts')\n            .then((response) => {\n                setShift(\n                    response.data.Items\n                        .filter( (shift: any) => shift.shift_id == 10000 )[0].shifts\n                );\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n        if (shifts && shiftsReady == false) {\n            // @ts-ignore\n            SHIFT_CALENDAR = capitalizeDays(shifts)\n            setShiftsReady(true)\n            calculatePlannedDate( '2023/02/14', '10:00')\n        }\n\n\n    }, );\n\n    let SHIFT_CALENDAR = {\n        'Sunday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Monday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Tuesday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Wednesday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Thursday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Friday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Saturday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n    };\n\n    const daysOfWeek = {\n        0: 'Sunday',\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday'\n    }\n\n    const calculatePlannedDate = (startDate: any, startTime: any) => {\n        let taskDuration = workingHours*60;\n        let taskStart = moment(startDate + ' ' + startTime)\n        // @ts-ignore\n        let [firstShift, firstShiftStartDate] = returnFirstShift(taskStart)\n        let currentDate = moment(taskStart.format('L'))\n        while (taskDuration > 0) {\n            for (let day in SHIFT_CALENDAR) {\n                // @ts-ignore\n                if (day == daysOfWeek[currentDate.day()]) {\n                    // @ts-ignore\n                    let todayShifts = SHIFT_CALENDAR[daysOfWeek[currentDate.day()]]\n\n                    for (let i = 1; i < 5; i++) {\n                        let currentShift = 'shift' + i\n                        if (todayShifts[currentShift].start == \"\") {\n                            continue\n                        }\n                        let shiftStart = moment(currentDate.format('L')\n                            + ' '\n                            + todayShifts[currentShift].start)\n                        let shiftEnd = moment(currentDate.format('L')\n                            + ' '\n                            + todayShifts[currentShift].end)\n                        if (shiftEnd.isBefore(shiftStart)) {\n                            shiftEnd.add(1, 'day')\n                        }\n\n                        if (shiftStart.isAfter(moment(firstShiftStartDate + ' ' + firstShift.start))) {\n                            taskStart = shiftStart\n                        }\n\n                        if ((taskStart.format('LLL') == shiftStart.format('LLL')\n                            || taskStart.isAfter(shiftStart)) && taskStart.isBefore(shiftEnd)) {\n                            let taskEnd = taskStart.clone()\n                            taskEnd.add(taskDuration, 'minutes')\n                            let timeTillShiftEnd = shiftEnd.diff(taskStart) / 3600000 * 60\n                            let timeTillTaskEnd = taskEnd.diff(taskStart) / 3600000 * 60\n\n                            if (timeTillTaskEnd <= timeTillShiftEnd) {\n                                console.log('Task end:', taskEnd.format())\n                                setPlannedDate(taskEnd)\n                                setPickupDate(taskEnd)\n                                return taskEnd\n                            } else {\n                                taskDuration -= timeTillShiftEnd\n                            }\n                        }\n                    }\n\n                    currentDate.add(1, 'day')\n                }\n            }\n        }\n    }\n\n    const returnFirstShift = (taskStart: any) => {\n        let currentDate = moment(taskStart.format('L'))\n        // @ts-ignore\n        for (let i = 0 ; i < 7 ; i++) {\n            // @ts-ignore\n            let todayShifts = SHIFT_CALENDAR[daysOfWeek[currentDate.day()]]\n            //figure out first shift\n            if (todayShifts.shift1.start != \"\") {\n                let shift1StartTime = todayShifts.shift1.start\n                let shift1EndTime = todayShifts.shift1.end\n                let shift1Start = moment(currentDate.format('L') + ' ' + shift1StartTime)\n                let shift1End = moment(currentDate.format('L') + ' ' + shift1EndTime)\n                if (shift1End.isBefore(shift1Start)) {\n                    shift1End.add(1, 'day')\n                }\n                if (shift1End.isAfter(taskStart)){\n                    return [todayShifts.shift1, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift2.start != \"\") {\n                let shift2StartTime = todayShifts.shift2.start\n                let shift2EndTime = todayShifts.shift2.end\n                let shift2Start = moment(currentDate.format('L') + ' ' + shift2StartTime)\n                let shift2End = moment(currentDate.format('L') + ' ' + shift2EndTime)\n                if (shift2End.isBefore(shift2Start)) {\n                    shift2End.add(1, 'day')\n                }\n                if (shift2End.isAfter(taskStart)){\n                    return [todayShifts.shift2, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift3.start != \"\") {\n                let shift3StartTime = todayShifts.shift3.start\n                let shift3EndTime = todayShifts.shift3.end\n                let shift3Start = moment(currentDate.format('L') + ' ' + shift3StartTime)\n                let shift3End = moment(currentDate.format('L') + ' ' + shift3EndTime)\n                if (shift3End.isBefore(shift3Start)) {\n                    shift3End.add(1, 'day')\n                }\n                if (shift3End.isAfter(taskStart)){\n                    return [todayShifts.shift3, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift4.start != \"\") {\n                let shift4StartTime = todayShifts.shift4.start\n                let shift4EndTime = todayShifts.shift4.end\n                let shift4Start = moment(currentDate.format('L') + ' ' + shift4StartTime)\n                let shift4End = moment(currentDate.format('L') + ' ' + shift4EndTime)\n                if (shift4End.isBefore(shift4Start)) {\n                    shift4End.add(1, 'day')\n                }\n                if (shift4End.isAfter(taskStart)){\n                    return [todayShifts.shift4, currentDate.format('L')]\n                }\n            }\n            currentDate.add(1,'day')\n        }\n    }\n\n    function capitalizeDays(shiftCalendar: any) {\n        const days = {\n            'sunday': 'Sunday',\n            'monday': 'Monday',\n            'tuesday': 'Tuesday',\n            'wednesday': 'Wednesday',\n            'thursday': 'Thursday',\n            'friday': 'Friday',\n            'saturday': 'Saturday',\n        };\n\n        const capitalizedCalendar = {};\n        for (const day in shiftCalendar) {\n            // @ts-ignore\n            capitalizedCalendar[days[day]] = shiftCalendar[day];\n        }\n\n        return capitalizedCalendar;\n    }\n\n    const averageKiloPerHour = 800\n    const currentNetto = 0\n    const maxNetto = 25000\n    const workingHours = (maxNetto-currentNetto)/averageKiloPerHour\n\n    return (\n        <div id=\"content-page\" className=\"px-20 h-full overflow-auto\">\n            <div>\n                <button className=\"border float-right p-1.5 px-3.5 font-bold border-accent-color-1 bg-accent-color-4\n                        hover:bg-accent-color-5 sm:rounded-lg shadow-md text-xs\">Bearbeiten</button>\n                <p className=\"mt-5 text-3xl font-bold mb-5\">Stammdaten</p>\n            </div>\n            <div className=\"mb-10\">\n                {data.map((line) =>\n                    <div key={line.client_id} className=\"text-sm space-y-2.5\">\n                        <p><span className=\"font-bold\">KundenNr.:</span> {line.client_id}</p>\n                        <p><span className=\"font-bold\">Firma:</span> {line.name}<br/></p>\n                        <p><span className=\"font-bold\">PLZ:</span> {line.zip}<br/></p>\n                        <p><span className=\"font-bold\">Stadt:</span> {line.city}<br/></p>\n                        <p><span className=\"font-bold\">Straße:</span> {line.street}<br/></p>\n                        <p><span className=\"font-bold\">Bundesland (D):</span> {line.region}<br/></p>\n                        <p><span className=\"font-bold\">Telefon:</span> {line.tel}<br/></p>\n                        <p><span className=\"font-bold\">E-Mail:</span> {line.email}<br/></p>\n                        <p><span className=\"font-bold\">Ansprechpartner:</span> {line.spokesperson}</p>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex\">\n                <Link href=\"/master-data/new-machine\"><button className=\"border ml-auto p-1.5 px-3.5 font-bold\n                              border-accent-color-1 bg-accent-color-4\n                              hover:bg-accent-color-5 sm:rounded-lg shadow-md text-xs\">\n                    + Neue Maschine\n                </button>\n                </Link>\n            </div>\n            <span className=\"text-xs uppercase font-bold text-gray-500\">\n                  Lagersysteme\n            </span>\n            <div className=\"mb-10 sm:rounded-lg shadow-md border overflow-auto\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th className=\"font-normal\">Masch.-ID<br/>Max Netto</th>\n                        <th className=\"font-normal\">Material</th>\n                        <th className=\"font-normal\">Füllgrad</th>\n                        <th className=\"font-normal\">Netto (kg)</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50\">\n                    {machinesData\n                        ? machinesData.map((machine: any) =>\n                            <tr key={machine.machine_id} className=\"text-xs border-t\">\n                                <td>\n                                    {machine.machineType}: <span className=\"underline\">\n                        <Link href={\"/machines/\" + machine.machine_id}>\n                            {machine.machine_id}\n                        </Link></span><br/>\n                                    <span>{machine.maxNetto}</span></td>\n                                <td>{machine.waretype}</td>\n                                <td className=\"flex\">\n                                    <div className=\"border border-black bg-white w-32 mr-1.5\">\n                                        <div className={getFillerStyle(machine.load)}/>\n                                    </div>\n                                    {machine.load}%</td>\n                                <td>{machine.maxNetto}</td>\n                            </tr>\n                    )\n                    : \"\"\n                    }\n                    </tbody>\n                </table>\n                <Popup\n                    machineID={machineID}\n                    pickupDate={pickupDate}\n                    setMachineID={setMachineID}\n                    setPickupDate={setPickupDate}\n                />\n            </div>\n            <div className=\"w-1/2\">\n                <Link href=\"/master-data/shift-manager\">\n                    <button className=\"border float-right p-1.5 px-3.5 font-bold border-accent-color-1 bg-accent-color-4\n                        hover:bg-accent-color-5 sm:rounded-lg shadow-md text-xs\">Schichten Bearbeiten\n                    </button>\n                </Link>\n            </div>\n            <span className=\"text-xs uppercase font-bold text-gray-500\">\n                  Schichten\n            </span>\n            <div className=\"mb-10 sm:rounded-lg shadow-md border overflow-auto w-1/4\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th/>\n                        <th className=\"font-normal\">Start</th>\n                        <th className=\"font-normal\">Ende</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td className=\"w-24\">Schicht 1</td>\n                        <td>22:00</td>\n                        <td>06:00</td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td className=\"w-24\">Schicht 2</td>\n                        <td>06:00</td>\n                        <td>14:00</td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td className=\"w-24\">Schicht 3</td>\n                        <td>14:00</td>\n                        <td>22:00</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"flex w-1/2\">\n                <Link href=\"/master-data/shift-calendar\">\n                    <button className=\"border ml-auto p-1.5 px-3.5 font-bold border-accent-color-1 bg-accent-color-4\n                        hover:bg-accent-color-5 sm:rounded-lg shadow-md text-xs\">Zeiten Bearbeiten\n                    </button>\n                </Link>\n            </div>\n            <span className=\"text-xs uppercase font-bold text-gray-500\">\n                  Arbeitszeiten\n            </span>\n            <div className=\"mb-10 sm:rounded-lg shadow-md border overflow-auto w-1/2\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th/>\n                        <th className=\"font-normal\">Schicht 1</th>\n                        <th className=\"font-normal\">Schicht 2</th>\n                        <th className=\"font-normal\">Schicht 3</th>\n                        <th className=\"font-normal\">Schicht 4</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Montag</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.monday.shift1.start != null\n                                && shifts.monday.shift1.end != null\n                                    ? shifts.monday.shift1.start + \"-\" + shifts.monday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.monday.shift2.start != null\n                                && shifts.monday.shift2.end != null\n                                    ? shifts.monday.shift2.start + \"-\" + shifts.monday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.monday.shift3.start != null\n                                && shifts.monday.shift3.end != null\n                                    ? shifts.monday.shift3.start + \"-\" + shifts.monday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.monday.shift4.start != null\n                                && shifts.monday.shift4.end != null\n                                    ? shifts.monday.shift4.start + \"-\" + shifts.monday.shift4.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Dienstag</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.tuesday.shift1.start != null\n                                && shifts.tuesday.shift1.end != null\n                                    ? shifts.tuesday.shift1.start + \"-\" + shifts.tuesday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.tuesday.shift2.start != null\n                                && shifts.tuesday.shift2.end != null\n                                    ? shifts.tuesday.shift2.start + \"-\" + shifts.tuesday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.tuesday.shift3.start != null\n                                && shifts.tuesday.shift3.end != null\n                                    ? shifts.tuesday.shift3.start + \"-\" + shifts.tuesday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.tuesday.shift4.start != null\n                                && shifts.tuesday.shift4.end != null\n                                    ? shifts.tuesday.shift4.start + \"-\" + shifts.tuesday.shift4.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Mittwoch</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.wednesday.shift1.start != null\n                                && shifts.wednesday.shift1.end != null\n                                    ? shifts.wednesday.shift1.start + \"-\" + shifts.wednesday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.wednesday.shift2.start != null\n                                && shifts.wednesday.shift2.end != null\n                                    ? shifts.wednesday.shift2.start + \"-\" + shifts.wednesday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.wednesday.shift3.start != null\n                                && shifts.wednesday.shift3.end != null\n                                    ? shifts.wednesday.shift3.start + \"-\" + shifts.wednesday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.wednesday.shift4.start != null\n                                && shifts.wednesday.shift4.end != null\n                                    ? shifts.wednesday.shift4.start + \"-\" + shifts.wednesday.shift4.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Donnerstag</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.thursday.shift1.start != null\n                                && shifts.thursday.shift1.end != null\n                                    ? shifts.thursday.shift1.start + \"-\" + shifts.thursday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.thursday.shift2.start != null\n                                && shifts.thursday.shift2.end != null\n                                    ? shifts.thursday.shift2.start + \"-\" + shifts.thursday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.thursday.shift3.start != null\n                                && shifts.thursday.shift3.end != null\n                                    ? shifts.thursday.shift3.start + \"-\" + shifts.thursday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.thursday.shift4.start != null\n                                && shifts.thursday.shift4.end != null\n                                    ? shifts.thursday.shift4.start + \"-\" + shifts.thursday.shift4.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Freitag</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.friday.shift1.start != null\n                                && shifts.friday.shift1.end != null\n                                    ? shifts.friday.shift1.start + \"-\" + shifts.friday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.friday.shift2.start != null\n                                && shifts.friday.shift2.end != null\n                                    ? shifts.friday.shift2.start + \"-\" + shifts.friday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.friday.shift3.start != null\n                                && shifts.friday.shift3.end != null\n                                    ? shifts.friday.shift3.start + \"-\" + shifts.friday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.friday.shift4.start != null\n                                && shifts.friday.shift4.end != null\n                                    ? shifts.friday.shift4.start + \"-\" + shifts.friday.shift4.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Samstag</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.saturday.shift1.start != null\n                                && shifts.saturday.shift1.end != null\n                                    ? shifts.saturday.shift1.start + \"-\" + shifts.saturday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.saturday.shift2.start != null\n                                && shifts.saturday.shift2.end != null\n                                    ? shifts.saturday.shift2.start + \"-\" + shifts.saturday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.saturday.shift3.start != null\n                                && shifts.saturday.shift3.end != null\n                                    ? shifts.saturday.shift3.start + \"-\" + shifts.saturday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.saturday.shift3.start != null\n                                && shifts.saturday.shift3.end != null\n                                    ? shifts.saturday.shift3.start + \"-\" + shifts.saturday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    <tr className=\"bg-gray-50 text-xs border-b text-left\">\n                        <td>Sonntag</td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.sunday.shift1.start != null\n                                && shifts.sunday.shift1.end != null\n                                    ? shifts.sunday.shift1.start + \"-\" + shifts.sunday.shift1.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.sunday.shift2.start != null\n                                && shifts.sunday.shift2.end != null\n                                    ? shifts.sunday.shift2.start + \"-\" + shifts.sunday.shift2.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.sunday.shift3.start != null\n                                && shifts.sunday.shift3.end != null\n                                    ? shifts.sunday.shift3.start + \"-\" + shifts.sunday.shift3.end\n                                    : \"-\"\n                            }\n                        </td>\n                        <td>\n                            {\n                                shifts\n                                && shifts.sunday.shift4.start != null\n                                && shifts.sunday.shift4.end != null\n                                    ? shifts.sunday.shift4.start + \"-\" + shifts.sunday.shift4.end\n                                    : \"-\"\n                            }\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default MasterData\n\n","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/annual-evaluation.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/annual-revenues.tsx",["190"],[],"import {useEffect, useState} from \"react\";\n\nconst revenues_2020 = [\n    {\n        product: \"Aluminium Späne, normal\",\n        weight: 46480,\n        value: 60024.07,\n        income: 60024.07,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Späne, nass\",\n        weight: 6860,\n        value: 8807.58,\n        income: 7310.29,\n        delta: -1497.29\n    },\n    {\n        product: \"Aluminium Profile AlSi1, Fe frei\",\n        weight: 50540,\n        value: 75635.31,\n        income: 75635.31,\n        delta: 0.00\n    },\n    {\n        product: \"Mischschrott mit Eisenanhaftung, Alu Anteil ca. 70 %\",\n        weight: 13780,\n        value: 2388.75,\n        income: 2370.67,\n        delta: -18.08\n    }\n]\nconst revenues_2021 = [\n    {\n        product: \"Eisenspäne\",\n        weight: 1060,\n        value: 275.28,\n        income: 275.28,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Späne, normal\",\n        weight: 112990,\n        value: 149397.55,\n        income: 149397.55,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Späne, nass\",\n        weight: 10030,\n        value: 6132.90,\n        income: 6132.90,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Profile AlSi1, Fe frei\",\n        weight: 57990,\n        value: 99753.66,\n        income: 99753.66,\n        delta: 0.00\n    },\n    {\n        product: \"Mischschrott mit Eisenanhaftung, Alu Anteil ca. 70 %\",\n        weight: 31450,\n        value: 8435.58,\n        income: 7851.48,\n        delta: -584.10\n    }\n]\nconst revenues_2022 = [\n    {\n        product: \"Mischschrott\",\n        weight: 17170,\n        value: 4931.18,\n        income: 4931.18,\n        delta: 0\n    },\n    {\n        product: \"Eisenspäne\",\n        weight: 18510,\n        value: 4788.59,\n        income: 4762.91,\n        delta: -25.68\n    },\n    {\n        product: \"Aluminium Späne, normal\",\n        weight: 80250,\n        value: 142491.14,\n        income: 142028.53,\n        delta: -462.61\n    },\n    {\n        product: \"Aluminium Späne, nass\",\n        weight: 9770,\n        value: 6909.20,\n        income: 6909.20,\n        delta: 0\n    },\n    {\n        product: \"Aluminium Profile AlSi1, Fe frei\",\n        weight: 47790,\n        value: 100481.65,\n        income: 100647.85,\n        delta: 166.20\n    },\n]\n\nconst AnnualRevenues = () => {\n    const [currentYearString, setCurrentYearString] = useState(\"2020\")\n    const [currentYear, setCurrentYear] = useState(revenues_2020)\n    const [totalWeight, setTotalWeight] = useState( 0);\n    const [totalValue, setTotalValue] = useState( 0);\n    const [totalIncome, setTotalIncome] = useState( 0);\n    const [totalDelta, setTotalDelta] = useState( 0);\n\n    const calculateTotalWeight = ()  => {\n        let weight = 0\n\n            for (let product in currentYear) {\n                weight = (weight + currentYear[product].weight)\n            }\n        return weight;\n    }\n    const calculateTotalValue = ()  => {\n        let value = 0\n\n        for (let product in currentYear) {\n            value = (value + currentYear[product].value)\n        }\n        return value;\n    }\n    const calculateTotalIncome = ()  => {\n        let income = 0\n\n        for (let product in currentYear) {\n            income = (income + currentYear[product].income)\n        }\n        return income;\n    }\n    const calculateTotalDelta = ()  => {\n        let delta = 0\n\n        for (let product in currentYear) {\n            delta = (delta + currentYear[product].delta)\n        }\n        return delta;\n    }\n\n    useEffect(() => {\n        let weight = calculateTotalWeight()\n        setTotalWeight(weight)\n        let income = calculateTotalIncome()\n        setTotalIncome(income)\n        let value = calculateTotalValue()\n        setTotalValue(value)\n        let delta = calculateTotalDelta()\n        setTotalDelta(delta)\n\n    }, [currentYear]);\n\n    return(\n        <div id=\"content-page\" className=\"px-20\">\n            <p className=\"mt-9 text-3xl font-bold mb-5\">Jahreserlöse {currentYearString}</p>\n            <div className=\"mb-2.5\">\n                <span onClick={()=>{setCurrentYear(revenues_2020);setCurrentYearString(\"2020\")}}\n                      className=\"text-sm cursor-pointer underline m-1\">2020</span>|\n                <span onClick={()=>{setCurrentYear(revenues_2021);setCurrentYearString(\"2021\")}}\n                      className=\"text-sm cursor-pointer underline m-1\">2021</span>|\n                <span onClick={()=>{setCurrentYear(revenues_2022);setCurrentYearString(\"2022\")}}\n                      className=\"text-sm cursor-pointer underline m-1\">2022</span>\n            </div>\n\n            <div className=\"sm:rounded-lg shadow-md border\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th className=\"font-normal\">Warenart</th>\n                        <th className=\"text-right font-normal\">Werksgewicht</th>\n                        <th className=\"text-right font-normal\">Betrag Werksgewicht</th>\n                        <th className=\"text-right font-normal\">Betrag erhalten</th>\n                        <th className=\"text-right font-normal\">Delta</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50\">\n                    {currentYear.map((year) =>\n                        <tr key={year.product} className=\"text-xs border-t\">\n                            <td>{year.product}</td>\n                            <td className=\"text-right\">{year.weight}</td>\n                            <td className=\"text-right\">{year.value} €</td>\n                            <td className=\"text-right\">{year.income} €</td>\n                            <td className=\"text-right\">{year.delta} €</td>\n                        </tr>\n                        )}\n                    <tr>\n                        <td colSpan={5}>\n                            <hr/>\n                        </td>\n                    </tr>\n                    <tr className=\"text-xs\">\n                        <td/>\n                        <td className=\"text-right\">\n                            {totalWeight}\n                        </td>\n                        <td className=\"text-right\">\n                            {totalValue} €\n                        </td>\n                        <td className=\"text-right\">\n                            {totalIncome} €\n                        </td>\n                        <td className=\"text-right\">\n                            {totalDelta.toFixed(2)} €\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default AnnualRevenues","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/co2-evaluation.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting/control-documents.tsx",["191","192","193","194"],[],"const machineList = [\n    {\n        machine: 7000,\n        pdf: \"\",\n        weigh: \"10000-10069\",\n        date: \"01/15/2020 11:32 AM\",\n        goods: \"-\",\n        gross: \"\",\n        tare: 1546,\n        net: -1546,\n        service_life: \"287.19h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: -0.31,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 7000,\n        pdf: \"\",\n        weigh: \"10000-10068\",\n        date: \"01/15/2020 11:32 AM\",\n        goods: \"-\",\n        gross: 130,\n        tare: \"\",\n        net: 130,\n        service_life: \"6,089.98h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 0.03,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 7000,\n        pdf: \"\",\n        weigh: \"10000-10059\",\n        date: \"05/13/2019, 6:23 PM\",\n        goods: \"-\",\n        gross: 1994,\n        tare: 1546,\n        net: 448,\n        service_life: \"49.75h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 19.82,\n        note: \"Weighing Steel Frames Fa Sachs\",\n        certificate: \"\"\n    },\n    {\n        machine: 8000,\n        pdf: \"\",\n        weigh: \"10000-10033\",\n        date: \"28.04.2017, 17:22\",\n        goods: \"-\",\n        gross: 12000,\n        tare: 1290,\n        net: 9360,\n        service_life: \"7,45h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 1256.38,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 8000,\n        pdf: \"\",\n        weigh: \"10000-10033\",\n        date: \"28.04.2017, 17:22\",\n        goods: \"-\",\n        gross: 12000,\n        tare: 1290,\n        net: 9360,\n        service_life: \"7,45h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 1256.38,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 8030,\n        pdf: \"\",\n        weigh: \"10000-10081\",\n        date: \"05.10.2022, 17:38\",\n        goods: \"Eisenspäne\",\n        gross: 2470,\n        tare: 2470,\n        net: \"\",\n        service_life: \"175,18h\",\n        prod_time: \"126,88h\",\n        kg_per_hour: 0.00,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 12345,\n        pdf: \"\",\n        weigh: \"10000-10080\",\n        date: \"18.05.2022, 14:45\",\n        goods: \"Eisenspäne, gebrochen ESB\",\n        gross: 5010,\n        tare: 2340,\n        net: 2670,\n        service_life: \"0,64h\",\n        prod_time: \"0,30h\",\n        kg_per_hour: 8949.72,\n        note: \"\",\n        certificate: \"\"\n    },\n]\n\nconst ControlDocuments = () => {\n    return(\n        <div id=\"content-page\" className=\"px-20\">\n            <p className=\"mt-9 text-3xl font-bold mb-10\">Kontrollbelege</p>\n            <div className=\"sm:rounded-lg shadow-md border overflow-x-auto\">\n                <table className=\"table-auto w-full\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th className=\"font-normal\">Maschine</th>\n                        <th className=\"font-normal\">PDF</th>\n                        <th className=\"font-normal\">Wiegenr.</th>\n                        <th className=\"font-normal\">Datum</th>\n                        <th className=\"font-normal\">Warenart</th>\n                        <th className=\"font-normal\">Bruttogewitcht</th>\n                        <th className=\"font-normal\">Taragewitcht</th>\n                        <th className=\"font-normal\">Nettogewicht</th>\n                        <th className=\"font-normal\">Standzeit</th>\n                        <th className=\"font-normal\">Prod.-<br/>Zeit</th>\n                        <th className=\"font-normal\">kg / h</th>\n                        <th className=\"font-normal\">Bemerkung</th>\n                        <th className=\"font-normal\">W.<br/>Schein</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50\">\n                    {machineList.map((machine) =>\n                        <tr key={machine.machine} className=\"text-xs border-t\">\n                            <td>{machine.machine}</td>\n                            <td><img className=\"h-5\" src=\"/download-svgrepo-com.svg\"/></td>\n                            <td>{machine.weigh.slice(0,6)}<br/>{machine.weigh.slice(6,12)}</td>\n                            <td>{machine.date.slice(0,10).replaceAll(\"/\",\".\")}</td>\n                            <td>{machine.goods}</td>\n                            <td>{machine.gross}</td>\n                            <td>{machine.tare}</td>\n                            <td>{machine.net}</td>\n                            <td>{machine.service_life}</td>\n                            <td>{machine.prod_time}</td>\n                            <td>{machine.kg_per_hour}</td>\n                            <td>{machine.note}</td>\n                            <td><img className=\"h-5\" src=\"/upload-svgrepo-com.svg\"/></td>\n                        </tr>\n                    )}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default ControlDocuments","/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/reporting.tsx",[],[],"/Users/adrianbrodzinski/Desktop/untitled folder/frontent-aws/pages/storage-systems.tsx",[],[],{"ruleId":"195","severity":1,"message":"196","line":27,"column":13,"nodeType":"197","endLine":27,"endColumn":66},{"ruleId":"198","severity":1,"message":"199","line":27,"column":13,"nodeType":"197","endLine":27,"endColumn":66},{"ruleId":"195","severity":1,"message":"196","line":6,"column":20,"nodeType":"197","endLine":6,"endColumn":77},{"ruleId":"195","severity":1,"message":"196","line":5,"column":17,"nodeType":"197","endLine":5,"endColumn":95},{"ruleId":"198","severity":1,"message":"199","line":5,"column":17,"nodeType":"197","endLine":5,"endColumn":95},{"ruleId":"195","severity":1,"message":"196","line":52,"column":37,"nodeType":"197","endLine":52,"endColumn":90},{"ruleId":"198","severity":1,"message":"199","line":52,"column":37,"nodeType":"197","endLine":52,"endColumn":90},{"ruleId":"195","severity":1,"message":"196","line":92,"column":29,"nodeType":"197","endLine":96,"endColumn":28},{"ruleId":"198","severity":1,"message":"199","line":92,"column":29,"nodeType":"197","endLine":96,"endColumn":28},{"ruleId":"195","severity":1,"message":"196","line":137,"column":25,"nodeType":"197","endLine":137,"endColumn":62},{"ruleId":"198","severity":1,"message":"199","line":137,"column":25,"nodeType":"197","endLine":137,"endColumn":62},{"ruleId":"195","severity":1,"message":"196","line":151,"column":25,"nodeType":"197","endLine":151,"endColumn":55},{"ruleId":"198","severity":1,"message":"199","line":151,"column":25,"nodeType":"197","endLine":151,"endColumn":55},{"ruleId":"195","severity":1,"message":"196","line":468,"column":63,"nodeType":"197","endLine":468,"endColumn":117},{"ruleId":"198","severity":1,"message":"199","line":468,"column":63,"nodeType":"197","endLine":468,"endColumn":117},{"ruleId":"195","severity":1,"message":"196","line":471,"column":71,"nodeType":"197","endLine":471,"endColumn":125},{"ruleId":"198","severity":1,"message":"199","line":471,"column":71,"nodeType":"197","endLine":471,"endColumn":125},{"ruleId":"195","severity":1,"message":"196","line":479,"column":63,"nodeType":"197","endLine":479,"endColumn":117},{"ruleId":"198","severity":1,"message":"199","line":479,"column":63,"nodeType":"197","endLine":479,"endColumn":117},{"ruleId":"195","severity":1,"message":"196","line":482,"column":67,"nodeType":"197","endLine":482,"endColumn":114},{"ruleId":"198","severity":1,"message":"199","line":482,"column":67,"nodeType":"197","endLine":482,"endColumn":114},{"ruleId":"200","severity":1,"message":"201","line":42,"column":7,"nodeType":"202","endLine":42,"endColumn":27,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":60,"column":30,"nodeType":"205","endLine":60,"endColumn":52},{"ruleId":"200","severity":1,"message":"206","line":159,"column":8,"nodeType":"202","endLine":159,"endColumn":21,"suggestions":"207"},{"ruleId":"195","severity":1,"message":"196","line":136,"column":33,"nodeType":"197","endLine":136,"endColumn":87},{"ruleId":"198","severity":1,"message":"199","line":136,"column":33,"nodeType":"197","endLine":136,"endColumn":87},{"ruleId":"195","severity":1,"message":"196","line":147,"column":33,"nodeType":"197","endLine":147,"endColumn":85},{"ruleId":"198","severity":1,"message":"199","line":147,"column":33,"nodeType":"197","endLine":147,"endColumn":85},"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data' and 'pid.id'. Either include them or remove the dependency array.","ArrayExpression",["208"],"Assignments to the 'SHIFT_CALENDAR' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has missing dependencies: 'calculateTotalDelta', 'calculateTotalIncome', 'calculateTotalValue', and 'calculateTotalWeight'. Either include them or remove the dependency array.",["209"],{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [startDate, endDate, data, pid.id]",{"range":"214","text":"215"},"Update the dependencies array to be: [calculateTotalDelta, calculateTotalIncome, calculateTotalValue, calculateTotalWeight, currentYear]",{"range":"216","text":"217"},[1428,1448],"[startDate, endDate, data, pid.id]",[3817,3830],"[calculateTotalDelta, calculateTotalIncome, calculateTotalValue, calculateTotalWeight, currentYear]"]