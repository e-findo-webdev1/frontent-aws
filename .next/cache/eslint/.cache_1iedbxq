[{"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/_app.tsx":"1","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/api/hello.ts":"2","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/clients/[client_id].tsx":"3","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/helpers/getFillerStyle.tsx":"4","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/login/LoginForm.tsx":"5","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/Breadcrumbs.tsx":"6","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/Logo.tsx":"7","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/Navigation.tsx":"8","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/NavigationButtons.tsx":"9","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/NavigationLinks.tsx":"10","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Header.tsx":"11","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/MachinesTable.tsx":"12","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Popup.tsx":"13","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Statistics.tsx":"14","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/StorageSystem.tsx":"15","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/StorageSystemDashboard.tsx":"16","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Summary.tsx":"17","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/impressum.tsx":"18","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/index.tsx":"19","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/machines/[id].tsx":"20","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/edit-machine/[id].tsx":"21","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/new-machine.tsx":"22","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/shift-calendar.tsx":"23","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/shift-manager.tsx":"24","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/annual-evaluation.tsx":"25","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/annual-revenues.tsx":"26","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/co2-evaluation.tsx":"27","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/control-documents.tsx":"28","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting.tsx":"29","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/storage-systems.tsx":"30","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/edit-worker/[user].tsx":"31","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/new-worker.tsx":"32","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/[client].tsx":"33","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/edit-client/[client].tsx":"34","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/pdf.tsx":"35"},{"size":1631,"mtime":1681652830410,"results":"36","hashOfConfig":"37"},{"size":307,"mtime":1679046485943,"results":"38","hashOfConfig":"37"},{"size":4364,"mtime":1679314143177,"results":"39","hashOfConfig":"37"},{"size":714,"mtime":1679046485944,"results":"40","hashOfConfig":"37"},{"size":4281,"mtime":1681822988855,"results":"41","hashOfConfig":"37"},{"size":2947,"mtime":1681383158910,"results":"42","hashOfConfig":"37"},{"size":286,"mtime":1679046485944,"results":"43","hashOfConfig":"37"},{"size":611,"mtime":1681653023666,"results":"44","hashOfConfig":"37"},{"size":702,"mtime":1681651920692,"results":"45","hashOfConfig":"37"},{"size":1630,"mtime":1681550730876,"results":"46","hashOfConfig":"37"},{"size":547,"mtime":1681651752512,"results":"47","hashOfConfig":"37"},{"size":3251,"mtime":1679046485944,"results":"48","hashOfConfig":"37"},{"size":7774,"mtime":1679046485944,"results":"49","hashOfConfig":"37"},{"size":1288,"mtime":1679046485945,"results":"50","hashOfConfig":"37"},{"size":1727,"mtime":1679046485945,"results":"51","hashOfConfig":"37"},{"size":24673,"mtime":1679046485945,"results":"52","hashOfConfig":"37"},{"size":611,"mtime":1679046485945,"results":"53","hashOfConfig":"37"},{"size":2198,"mtime":1680689450648,"results":"54","hashOfConfig":"37"},{"size":371,"mtime":1679046485945,"results":"55","hashOfConfig":"37"},{"size":13306,"mtime":1680620376155,"results":"56","hashOfConfig":"37"},{"size":20803,"mtime":1681469540259,"results":"57","hashOfConfig":"37"},{"size":17841,"mtime":1679314076668,"results":"58","hashOfConfig":"37"},{"size":95784,"mtime":1679046485946,"results":"59","hashOfConfig":"37"},{"size":8562,"mtime":1679046485946,"results":"60","hashOfConfig":"37"},{"size":12700,"mtime":1679046485947,"results":"61","hashOfConfig":"37"},{"size":6765,"mtime":1679046485947,"results":"62","hashOfConfig":"37"},{"size":2547,"mtime":1679046485947,"results":"63","hashOfConfig":"37"},{"size":4950,"mtime":1679046485947,"results":"64","hashOfConfig":"37"},{"size":2346,"mtime":1679046485947,"results":"65","hashOfConfig":"37"},{"size":7042,"mtime":1680687431250,"results":"66","hashOfConfig":"37"},{"size":17114,"mtime":1681823607891,"results":"67","hashOfConfig":"37"},{"size":12449,"mtime":1681729644126,"results":"68","hashOfConfig":"37"},{"size":36789,"mtime":1681560020593,"results":"69","hashOfConfig":"37"},{"size":12653,"mtime":1681562507968,"results":"70","hashOfConfig":"37"},{"size":6229,"mtime":1681982165756,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dejlfv",{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/_app.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/api/hello.ts",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/clients/[client_id].tsx",["185"],[],"import {useEffect, useState} from \"react\";\nimport API from \"axios\";\nimport {useRouter} from \"next/router\";\n\nconst ClientPage = () => {\n    const [data, setData] = useState<any>([]);\n    const [land, setLand] = useState<any>([]);\n    const router = useRouter()\n    const pid = router.query\n\n    useEffect(() => {\n        let apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/clients';\n\n        API.get(apiName)\n            .then((response) => {\n                setData(response.data.Items\n                    .filter((client: { client_number: number; }) =>\n                        client.client_number == parseInt(pid.client_id as string))[0]\n                )\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n        API.get('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/lands')\n            .then((response) => {\n                setLand(response.data.Items\n                    .filter((land: { land_id: number; }) =>\n                        land.land_id == data.land_id)[0].land_name)\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n    },[]);\n\n    if (data) {\n        return(\n            <div id=\"content-page\" className=\"mx-10 p-10 overflow-auto h-full\">\n                <p className=\"mb-9 text-3xl font-bold\">Stammdaten</p>\n                <div className=\"mb-9 text-sm\">\n                    <table>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">KundenNr.:</td>\n                            <td className=\"p-0 pb-1.5 \">{data.client_number}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">Firma:</td>\n                            <td className=\"p-0 pb-1.5 \">{data.client_name}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">PLZ:</td>\n                            <td className=\"p-0 pb-1.5\">{data.zip_code}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">Stadt:</td>\n                            <td className=\"p-0 pb-1.5\">{data.city}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">Straße:</td>\n                            <td className=\"p-0 pb-1.5\">{data.street}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0 pr-10\">Bundesland (D):</td>\n                            <td className=\"p-0 pb-1.5\">{land}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">Telefon:</td>\n                            <td className=\"p-0 pb-1.5\">{data.telefon}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">E-Mail:</td>\n                            <td className=\"p-0 pb-1.5\">{data.email}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"font-bold pl-0 pb-1.5 pt-0\">Ansprechpartner:</td>\n                            <td className=\"p-0 pb-1.5\">{data.contact}</td>\n                        </tr>\n                    </table>\n                </div>\n                <span className=\"text-xs uppercase font-bold text-gray-500\">\n                  Lagersysteme\n                </span>\n                <div className=\"sm:rounded-lg shadow-md border h-72 overflow-auto\">\n                    <table className=\"flex-row w-full table-auto\">\n                        <thead>\n                        <tr className=\"text-xs text-gray-500 border-b text-left\">\n                            <th className=\"font-normal\">Masch.-ID<br/>Max Netto</th>\n                            <th className=\"font-normal\">Material</th>\n                            <th className=\"font-normal\">Füllgrad</th>\n                            <th className=\"font-normal\">Netto (kg)</th>\n                        </tr>\n                        </thead>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ClientPage","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/helpers/getFillerStyle.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/login/LoginForm.tsx",["186","187"],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/Breadcrumbs.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/Logo.tsx",["188"],[],"import Link from \"next/link\";\nconst Logo = () => {\n    return (\n        <div id=\"logo\" className=\"mx-5 my-auto\" >\n            <Link href=\"/\">\n                <a><img className=\"ml-5 h-10\" src=\"/logo-1.png\" alt=\"logo\"/></a>\n            </Link>\n        </div>\n    )\n}\n\nexport default Logo","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/Navigation.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/NavigationButtons.tsx",["189","190"],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/navigation/NavigationLinks.tsx",["191","192"],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Header.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/MachinesTable.tsx",["193","194"],[],"import getFillerStyle from \"../helpers/getFillerStyle\";\nimport Link from \"next/link\";\n\nconst machineList = [\n    {\n        type: \"esb\",\n        id: \"4712\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 79,\n        plan_date: \"17.10.2022 02:31\",\n        pickup_date: \"1/1/2022 01:00\",\n        netto: 5880\n    },\n    {\n        type: \"bw\",\n        id: \"9001 CMS-A\",\n        max_netto: 9000,\n        material: \"Eisenspäne, normal\",\n        load: 31,\n        plan_date: \"21/12/2022 02:26\",\n        pickup_date: \"4/4/2022 01:00\",\n        netto: 2760\n    },\n    {\n        type: \"bw\",\n        id: \"9002 CMS-A\",\n        max_netto: 9000,\n        material: \"Eisenspäne, normal\",\n        load: 22,\n        plan_date: \"noch keine Füllung\",\n        pickup_date: \"-\",\n        netto: 1960\n    },\n    {\n        type: \"esb\",\n        id: \"4711\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 0,\n        plan_date: \"nicht ermittelbar\",\n        pickup_date: \"-\",\n        netto: 120\n    },\n    {\n        type: \"esb\",\n        id: \"4711\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 0,\n        plan_date: \"nicht ermittelbar\",\n        pickup_date: \"-\",\n        netto: 120\n    },\n    {\n        type: \"esb\",\n        id: \"4711\",\n        max_netto: 26500,\n        material: \"Eisenspäne, gebrochen ESB, gebrochen\",\n        load: 0,\n        plan_date: \"nicht ermittelbar\",\n        pickup_date: \"-\",\n        netto: 120\n    },\n]\n\nconst MachinesTable = ({setMachineID, setPickupDate}: any) => {\n    return(\n        <tbody className=\"bg-gray-50\">\n        {machineList.map((machine) =>\n            <tr key={machine.id} className=\"text-xs border-t\">\n                <td>\n                    {machine.type}: <span className=\"underline\">\n                        <Link href={\"/machines/\" + machine.id}>\n                            {machine.id}\n                        </Link></span><br/>\n                    <span>{machine.max_netto}</span></td>\n                <td>{machine.material}</td>\n                <td className=\"flex\">\n                    <div className=\"border border-black bg-white w-32 mr-1.5\">\n                        <div className={getFillerStyle(machine.load)}/>\n                    </div>\n                    {machine.load}%</td>\n                <td>{machine.plan_date}<br/>\n                    <span id={\"pickup_date_\" + machine.id}\n                        className={machine.pickup_date != \"-\"\n                                    ? \"flex underline\"\n                                    : \"flex\"}>\n                        {machine.pickup_date}\n                        <button onClick={() => {setMachineID(machine.id);\n                        setPickupDate(new Date(machine.pickup_date))}}>\n                            <img\n                            src={machine.pickup_date != \"-\"\n                            ? \"/icon_fragezeichen 1.svg\"\n                            : \"\"\n                        }/>\n                        </button>\n                    </span>\n                </td>\n                <td>{machine.netto}</td>\n            </tr>\n        )}\n        </tbody>\n    )\n}\n\nexport default MachinesTable","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Popup.tsx",["195","196","197","198"],[],"import DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport API from \"axios\";\nimport {useState} from \"react\";\n\nconst Popup = ({machineID, pickupDate, setPickupDates, setMachineID, setPickupDate, pickupDates, machinesData,\n                  areDatesConfirmed, setAreDatesConfirmed, setNewPickupDates, newPickupDates, radioConfirmed,\n                   setRadioConfirmed}: any) => {\n\n    const [displayedDate, setDisplayedDate] = useState<any>()\n\n\n    const sendData = (responseBody: any) => {\n        API.put('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines',\n            responseBody)\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    const updatePickupDates = (date: any) => {\n       // pickupDates = pickupDates.filter((obj:any) =>\n       // {return obj.machineID!=machineID})\n      //  pickupDates.push({machineID: machineID, taskEnd: date})\n      //  setPickupDates(pickupDates)\n        let machineData = machinesData.filter((obj: any)=> {return obj.machine_id == machineID})[0]\n        let newMachineData = {\n            machine_id: machineData.machine_id,\n            machineType: machineData.machineType,\n            machineName: machineData.machineName,\n            group: machineData.group,\n            waretype: machineData.waretype,\n            quality: machineData.quality,\n            index: machineData.index,\n            maxNetto: machineData.maxNetto,\n            minContainer: machineData.minContainer,\n            maxContainer: machineData.maxContainer,\n            averageThroughput: machineData.averageThroughput,\n            manualTara: machineData.manualTara,\n            minForFullStart: machineData.minForFullStart,\n            newFT111: machineData.newFT111,\n            automaticTara: machineData.automaticTara,\n            fillingType: machineData.fillingType,\n            plandateCalculation: machineData.plandateCalculation,\n            status: machineData.status,\n            client: machineData.client,\n            total_working_time: machineData.total_working_time,\n            total_working_weight: machineData.total_working_weight,\n            pickup_date: date.format('YYYY-MM-DD HH:mm'),\n            isDateConfirmed: radioConfirmed,\n            lastIndicate: machineData.lastIndicate,\n            lastTara: machineData.lastTara,\n        }\n\n        let newDates = newPickupDates.filter((obj:any) =>\n        {return obj.machine_id!=machineID})\n        newDates.push([{machine_id: machineID, date: date.format('YYYY-MM-DD HH:mm')}])\n        setNewPickupDates(newDates.flat())\n        let newDatesConfirmed = areDatesConfirmed.filter((obj:any) =>\n        {return obj.machine_id!=machineID})\n        newDatesConfirmed.push([{machine_id: machineID, date_confirmed: radioConfirmed}])\n        setAreDatesConfirmed(newDatesConfirmed.flat())\n        sendData(newMachineData)\n        setMachineID(\"\")\n        setPickupDate(\"\")\n        setRadioConfirmed(\"\")\n    }\n\n    const checkDay = () => {\n        const days =\n            {\n                0: \"Montag\",\n                1: \"Dienstag\",\n                2: \"Mittwoch\",\n                3: \"Donnerstag\",\n                4: \"Freitag\",\n                5: \"Samstag\",\n                6: \"Sonntag\"\n            }\n            if (pickupDate && pickupDate != \"\") {\n                const day = moment(pickupDate).day()\n            // @ts-ignore\n            return days[day]\n            }\n            // @ts-ignore\n          //  else if ( pickupDates.length != 0) {\n          //      const day = pickupDates.filter((obj:any) =>\n           //         {return obj.machineID==machineID})[0].taskEnd.toDate().getDay()\n            // @ts-ignore\n          //      return days[day]\n          //  }\n    }\n\n    return(\n        <div id=\"popup\"\n             className={ machineID != \"\"\n                 ? \"text-sm bg-white w-1/3 sm:rounded-lg shadow-md border p-5 space-y-4 \" +\n                 \"fixed -mt-64 left-0 right-0 m-auto\"\n                 : \"hidden\" }>\n            <p>Abholdatum bearbeiten (Masch.-ID: {machineID})</p>\n            <div className=\"flex\">\n                <div className=\"flex space-x-1\">\n                    <p className=\"m-auto\">Abholdatum:</p>\n                    <DatePicker className=\"shadow-md border text-center p-0.5\"\n                                // @ts-ignore\n                                selected={\n                                    pickupDate && pickupDate != \"\"\n                                        ? moment(pickupDate).toDate()\n                                        // @ts-ignore\n                                        //: pickupDates.length != 0 ?\n                                         //   pickupDates\n                                          //      .filter((obj:any) =>\n                                         //       {return obj.machineID==machineID})[0].taskEnd.toDate()\n                                            : \"\"\n                    }\n                                showTimeSelect dateFormat=\"dd.MM.yyyy HH:mm\"\n                                timeFormat=\"HH:mm\"\n                                onChange={(date:Date) => setPickupDate(moment(date))}/>\n                    <div className=\"m-auto\">({checkDay()})</div>\n                </div>\n            </div>\n            <div className=\"flex space-x-3\">\n                <div className=\"flex items-center\">\n                    <input id=\"radio-1\" type=\"radio\" value=\"\" name=\"default-radio\"\n                           checked={machinesData && radioConfirmed == false\n                                        ? true\n                                        : false\n                            }\n                           onChange={()=>{setRadioConfirmed(false)}}\n                           className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500\n                               dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700\n                               dark:border-gray-600\"/>\n                    <label htmlFor=\"radio-1\"\n                           className=\"flex ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">\n                        <img src=\"/icon_fragezeichen 1.svg\"/>Angefragt</label>\n                </div>\n                <div className=\"flex items-center\">\n                    <input id=\"radio-2\" type=\"radio\" value=\"\" name=\"default-radio\"\n                           checked={machinesData && radioConfirmed == true\n                               ? true\n                               : false\n                           }\n                           onChange={()=>{setRadioConfirmed(true)}}\n                           className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500\n                               dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700\n                               dark:border-gray-600\"/>\n                    <label htmlFor=\"radio-2\"\n                           className=\"flex ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">\n                        <img src=\"/icon_haken 1.svg\"/>Bestätigt</label>\n                </div>\n            </div>\n            <div id=\"popup-buttons\" className=\"space-x-5\">\n                <button className=\"sm:rounded-lg shadow-md border p-1\"\n                        onClick={() => {updatePickupDates(pickupDate)}}>\n                    Speichern</button>\n                <button className=\"sm:rounded-lg shadow-md border p-1\"\n                        onClick={() => {setMachineID(\"\");setPickupDate(\"\");setRadioConfirmed(\"\")}}>\n                    Abbrechen</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Popup","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Statistics.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/StorageSystem.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/StorageSystemDashboard.tsx",["199","200","201","202","203","204","205","206"],[],"import {useEffect, useState} from \"react\";\nimport Link from \"next/link\";\nimport getFillerStyle from \"../helpers/getFillerStyle\";\nimport API from \"axios\";\nimport moment from \"moment\";\nimport Popup from \"./Popup\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst StorageSystemDashboard = () => {\n    const [machinesData, setMachinesData] = useState<any>();\n    const [shifts, setShift] = useState<any>();\n    const [machineID, setMachineID] = useState<any>(\"\");\n    const [plannedDates, setPlannedDates] = useState<[]>([]);\n    const [pickupDate, setPickupDate] = useState<any>(\"\");\n    const [pickupDates, setPickupDates] = useState<[]>([]);\n    const [isDateConfirmed, setIsDateConfirmed] = useState<any>(\"\");\n    const [newPickupDates, setNewPickupDates] = useState<[]>([]);\n    const [areDatesConfirmed, setAreDatesConfirmed] = useState<[]>([]);\n    const [radioConfirmed, setRadioConfirmed] = useState<any>(\"\");\n\n    useEffect(() => {\n        let apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines';\n\n        API.get(apiName)\n            .then((response) => {\n                setMachinesData(response.data.Items\n                    .filter((machine: { client: string; }) =>\n                        machine.client == \"e-findo GmbH\"));\n            })\n            .catch((error) => {\n                console.log(error); //\n            });\n\n        API.get('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/shifts')\n            .then((response) => {\n                setShift(\n                    response.data.Items\n                        .filter( (shift: any) => shift.shift_id == 10000 )[0].shifts\n                );\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n    }, []);\n\n    let SHIFT_CALENDAR = {\n        'Sunday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Monday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Tuesday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Wednesday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Thursday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Friday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n        'Saturday': {\n            'shift1': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift2': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift3': {\n                startTime: '',\n                endTime: '',\n            },\n            'shift4': {\n                startTime: '',\n                endTime: '',\n            },\n        },\n    };\n    const daysOfWeek = {\n        0: 'Sunday',\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday'\n    }\n    function capitalizeDays(shiftCalendar: any) {\n        const days = {\n            'sunday': 'Sunday',\n            'monday': 'Monday',\n            'tuesday': 'Tuesday',\n            'wednesday': 'Wednesday',\n            'thursday': 'Thursday',\n            'friday': 'Friday',\n            'saturday': 'Saturday',\n        };\n\n        const capitalizedCalendar = {};\n        for (const day in shiftCalendar) {\n            // @ts-ignore\n            capitalizedCalendar[days[day]] = shiftCalendar[day];\n        }\n\n        return capitalizedCalendar;\n    }\n\n    const returnFirstShift = (taskStart: any) => {\n        let currentDate = moment(taskStart.format('L'))\n        // @ts-ignore\n        for (let i = 0 ; i < 7 ; i++) {\n            // @ts-ignore\n            let todayShifts = SHIFT_CALENDAR[daysOfWeek[currentDate.day()]]\n            //figure out first shift\n            if (todayShifts.shift1.start != \"\") {\n                let shift1StartTime = todayShifts.shift1.start\n                let shift1EndTime = todayShifts.shift1.end\n                let shift1Start = moment(currentDate.format('L') + ' ' + shift1StartTime)\n                let shift1End = moment(currentDate.format('L') + ' ' + shift1EndTime)\n                if (shift1End.isBefore(shift1Start)) {\n                    shift1End.add(1, 'day')\n                }\n                if (shift1End.isAfter(taskStart)){\n                    return [todayShifts.shift1, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift2.start != \"\") {\n                let shift2StartTime = todayShifts.shift2.start\n                let shift2EndTime = todayShifts.shift2.end\n                let shift2Start = moment(currentDate.format('L') + ' ' + shift2StartTime)\n                let shift2End = moment(currentDate.format('L') + ' ' + shift2EndTime)\n                if (shift2End.isBefore(shift2Start)) {\n                    shift2End.add(1, 'day')\n                }\n                if (shift2End.isAfter(taskStart)){\n                    return [todayShifts.shift2, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift3.start != \"\") {\n                let shift3StartTime = todayShifts.shift3.start\n                let shift3EndTime = todayShifts.shift3.end\n                let shift3Start = moment(currentDate.format('L') + ' ' + shift3StartTime)\n                let shift3End = moment(currentDate.format('L') + ' ' + shift3EndTime)\n                if (shift3End.isBefore(shift3Start)) {\n                    shift3End.add(1, 'day')\n                }\n                if (shift3End.isAfter(taskStart)){\n                    return [todayShifts.shift3, currentDate.format('L')]\n                }\n            }\n\n            if (todayShifts.shift4.start != \"\") {\n                let shift4StartTime = todayShifts.shift4.start\n                let shift4EndTime = todayShifts.shift4.end\n                let shift4Start = moment(currentDate.format('L') + ' ' + shift4StartTime)\n                let shift4End = moment(currentDate.format('L') + ' ' + shift4EndTime)\n                if (shift4End.isBefore(shift4Start)) {\n                    shift4End.add(1, 'day')\n                }\n                if (shift4End.isAfter(taskStart)){\n                    return [todayShifts.shift4, currentDate.format('L')]\n                }\n            }\n            currentDate.add(1,'day')\n        }\n    }\n\n    const calculatePlannedDate = (workingHours: any, machineID: any) => {\n        let taskDuration = workingHours*60;\n        let taskStart = moment()\n        // @ts-ignore\n        let [firstShift, firstShiftStartDate] = returnFirstShift(taskStart)\n        let currentDate = moment(taskStart.format('L'))\n        while (taskDuration > 0) {\n            for (let day in SHIFT_CALENDAR) {\n                // @ts-ignore\n                if (day == daysOfWeek[currentDate.day()]) {\n                    // @ts-ignore\n                    let todayShifts = SHIFT_CALENDAR[daysOfWeek[currentDate.day()]]\n\n                    for (let i = 1; i < 5; i++) {\n                        let currentShift = 'shift' + i\n                        if (todayShifts[currentShift].start == \"\") {\n                            continue\n                        }\n                        let shiftStart = moment(currentDate.format('L')\n                            + ' '\n                            + todayShifts[currentShift].start)\n                        let shiftEnd = moment(currentDate.format('L')\n                            + ' '\n                            + todayShifts[currentShift].end)\n                        if (shiftEnd.isBefore(shiftStart)) {\n                            shiftEnd.add(1, 'day')\n                        }\n\n                        if (shiftStart.isAfter(moment(firstShiftStartDate + ' ' + firstShift.start))) {\n                            taskStart = shiftStart\n                        }\n\n                        if ((taskStart.format('LLL') == shiftStart.format('LLL')\n                            || taskStart.isAfter(shiftStart)) && taskStart.isBefore(shiftEnd)) {\n                            let taskEnd = taskStart.clone()\n                            taskEnd.add(taskDuration, 'minutes')\n                            let timeTillShiftEnd = shiftEnd.diff(taskStart) / 3600000 * 60\n                            let timeTillTaskEnd = taskEnd.diff(taskStart) / 3600000 * 60\n\n                            if (timeTillTaskEnd <= timeTillShiftEnd) {\n                                let currentDates = plannedDates\n                                // @ts-ignore\n                                currentDates.push([{\"machineID\": machineID,\n                                \"taskEnd\": taskEnd}])\n                                // @ts-ignore\n                                setPlannedDates(currentDates.flat())\n                                // @ts-ignore\n                                setPickupDates(currentDates.flat())\n\n                                return taskEnd\n                            } else {\n                                taskDuration -= timeTillShiftEnd\n                            }\n                        }\n                    }\n\n                    currentDate.add(1, 'day')\n                }\n            }\n        }\n    }\n\n    if (machinesData && shifts && plannedDates.length == 0) {\n        // @ts-ignore\n        SHIFT_CALENDAR = capitalizeDays(shifts)\n        for (let machine in machinesData) {\n            const machineID = machinesData[machine].machine_id\n            const averageThroughput = machinesData[machine].averageThroughput\n            const currentNetto = machinesData[machine].lastTara\n            const maxNetto = machinesData[machine].maxNetto\n            const workingHours = (maxNetto-currentNetto)/averageThroughput\n            if (averageThroughput != 0) {\n                calculatePlannedDate(workingHours, machineID)\n            }\n        }\n    }\n\n\n    return (\n        <div id=\"storage-system\" className=\"mt-5\">\n              <span className=\"text-xs uppercase font-bold text-gray-500\">\n                  Lagersysteme\n              </span>\n            <div className=\"sm:rounded-lg shadow-md border overflow-auto\">\n                <div className=\"sm:rounded-lg shadow-md border overflow-auto\">\n                    <table className=\"flex-row w-full table-auto\">\n                        <thead>\n                        <tr className=\"text-xs text-gray-500 border-b text-left\">\n                            <th className=\"font-normal\">Masch.-ID<br/>Max Netto</th>\n                            <th className=\"font-normal\">Material</th>\n                            <th className=\"font-normal\">Füllgrad</th>\n                            <th className=\"font-normal\">Plandatum<br/>Abholdatum</th>\n                            <th className=\"font-normal\">Netto (kg)</th>\n                        </tr>\n                        </thead>\n                        <tbody className=\"bg-gray-50\">\n                        {machinesData\n                            ? machinesData.map((machine: any) =>\n                                    <tr key={machine.machine_id} className=\"text-xs border-t\">\n                                        <td>\n                                            {machine.machineType}: <span className=\"underline\">\n                        <Link href={\"/machines/\" + machine.machine_id}>\n                            {machine.machine_id}\n                        </Link></span><br/>\n                                            <span>{machine.maxNetto}</span></td>\n                                        <td>{machine.waretype}</td>\n                                        <td className=\"flex\">\n                                            <div className=\"border border-black bg-white w-32 mr-1.5\">\n\n                                                <div\n                                                    // @ts-ignore\n                                                    className={ (machine.lastIndicate - machine.lastTara) * 100\n                                                    / machine.maxNetto > 0\n                                                    ? getFillerStyle(\n                                                    (machine.lastIndicate - machine.lastTara) * 100\n                                                    / machine.maxNetto\n                                                    )\n                                                    : 0\n                                                }/>\n                                            </div>\n                                            { parseInt(((machine.lastIndicate - machine.lastTara) * 100\n                                                / machine.maxNetto).toFixed(0)) > 0\n                                                ?\n                                                ((machine.lastIndicate - machine.lastTara) * 100\n                                                / machine.maxNetto).toFixed(0)\n                                                : 0}%</td>\n                                        <td>\n                                            {\n                                                <span>\n                                                    { machine.total_working_time != 0 && plannedDates && plannedDates\n                                                            .filter((obj:any) =>\n                                                            {return obj.machineID===machine.machine_id}).length != 0\n                                                        ? plannedDates\n                                                          .filter((obj:any) =>\n                                                            {return obj.machineID===machine.machine_id})\n                                                            .map((plannedDate: any) =>\n                                                                <a key={plannedDate.machineID}>\n                                                                    {plannedDate.taskEnd.format('DD.MM.YYYY HH:mm')}\n                                                                </a>)\n                                                        : \"-\"\n                                                    }<br/>\n                                                    <a className={ machine.total_working_time != 0\n                                                        ? \"underline cursor-pointer flex\"\n                                                        : \"underline pointer-events-none flex\"}\n                                                    onClick={()=>\n                                                    {\n                                                        setMachineID(machine.machine_id)\n                                                        if (machinesData && machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                            .pickup_date != \"\") {\n                                                            setPickupDate(moment(machinesData.filter((obj: any) =>\n                                                            {return obj.machine_id == machine.machine_id})[0].pickup_date))\n                                                        } else if (pickupDates) {\n                                                         setPickupDate(pickupDates\n                                                             .filter((obj:any) =>\n                                                             {return obj.machineID===machine.machine_id})[0]\n                                                             // @ts-ignore\n                                                             .taskEnd)\n                                                        }\n\n                                                        setIsDateConfirmed(machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                            .isDateConfirmed)\n                                                        setRadioConfirmed(machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                            .isDateConfirmed)}\n\n                                                    }>\n                                                    {   newPickupDates && newPickupDates.filter((obj:any) =>\n                                                        {return obj.machine_id == machine.machine_id}).length != 0\n                                                        ? moment(newPickupDates.filter((obj:any) =>\n                                                            // @ts-ignore\n                                                        {return obj.machine_id == machine.machine_id})[0].date)\n                                                            .format('DD.MM.YYYY HH:mm')\n                                                        : machine.total_working_time !=0\n                                                        && pickupDates\n                                                        && pickupDates.length != 0\n                                                        && machinesData.filter((obj: any) =>\n                                                        {return obj.machine_id == machine.machine_id})[0]\n                                                        .pickup_date == \"\"\n                                                            ? pickupDates\n                                                                .filter((obj:any) =>\n                                                                {return obj.machineID===machine.machine_id})\n                                                                .map((pickupDate: any) =>\n                                                                    <span key={pickupDate.machineID}>\n                                                                        {pickupDate.taskEnd.format('DD.MM.YYYY HH:mm')}\n                                                                    </span>\n                                                                )\n                                                            : machine.total_working_time !=0\n                                                            && machinesData.filter((obj: any) =>\n                                                            {return obj.machine_id == machine.machine_id})[0]\n                                                            .pickup_date != \"\"\n                                                            ? moment(machinesData.filter((obj: any) =>\n                                                                {return obj.machine_id == machine.machine_id})[0]\n                                                                .pickup_date).format('DD.MM.yyyy HH:mm')\n                                                            : \"-\"\n                                                    }\n                                                        {   areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id}).length != 0\n                                                            && areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id})\n                                                            // @ts-ignore\n                                                            .date_confirmed == false\n                                                            ? <img className=\"ml-1\" src=\"/icon_fragezeichen 1.svg\"/>\n                                                            : machine.total_working_time !=0\n                                                            && machine.isDateConfirmed == false\n                                                                    ? <img className=\"ml-1\" src=\"/icon_fragezeichen 1.svg\"/>\n                                                                    :\"\"}\n                                                        {   areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id}).length != 0\n                                                        && areDatesConfirmed.filter((obj:any)=>\n                                                        {return obj.machine_id == machine.machine_id})\n                                                            // @ts-ignore\n                                                            .date_confirmed == true\n                                                            ? <img className=\"ml-1\" src=\"/icon_fragezeichen 1.svg\"/>\n                                                            : machine.total_working_time !=0\n                                                            && machine.isDateConfirmed == true\n                                                                ? <img className=\"ml-1\" src=\"/icon_haken 1.svg\"/>\n                                                                :\"\"}\n                                                    </a>\n                                                </span>\n                                            }\n                                        </td>\n                                        <td>{machine.maxNetto}</td>\n                                    </tr>\n                            )\n                            : \"\"\n                        }\n                        </tbody>\n                    </table>\n                    <Popup\n                        machineID={machineID}\n                        pickupDate={pickupDate}\n                        setMachineID={setMachineID}\n                        setPickupDate={setPickupDate}\n                        setPickupDates={setPickupDates}\n                        pickupDates={pickupDates}\n                        machinesData={machinesData}\n                        isDateConfirmed={isDateConfirmed}\n                        setIsDateConfirmed={setIsDateConfirmed}\n                        setNewPickupDates={setNewPickupDates}\n                        newPickupDates={newPickupDates}\n                        areDatesConfirmed={areDatesConfirmed}\n                        setAreDatesConfirmed={setAreDatesConfirmed}\n                        radioConfirmed={radioConfirmed}\n                        setRadioConfirmed={setRadioConfirmed}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default StorageSystemDashboard","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/components/start/Summary.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/impressum.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/index.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/machines/[id].tsx",["207"],[],"import {useRouter} from \"next/router\";\nimport {useEffect, useState} from \"react\";\n\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport DatePicker from \"react-datepicker\";\nimport API from 'axios';\nimport moment from \"moment\";\n\nconst MachineStorageHistory = () => {\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const [newEndDate, setNewEndDate] = useState(new Date());\n    const [data, setData] = useState<any[]>([]);\n    const [machinesData, setMachinesData] = useState<any[]>([]);\n\n    useEffect(() => {\n        const apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/items';\n\n        API.get(apiName)\n            .then((response) => {\n                setData(response.data.flat())\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n        const newEndDate = new Date();\n        newEndDate.setDate(endDate.getDate() + 1)\n        newEndDate.setHours(0,0,0,0);\n        setNewEndDate(newEndDate)\n        startDate.setHours(0,0,0,0)\n\n        API.get('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines')\n            .then((response) => {\n                setMachinesData(response.data.Items.filter((item: any) => item.machine_id == pid.id));\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n\n\n    },[startDate, endDate]);\n\n    const router = useRouter()\n    const pid = router.query\n\n    let averageThroughputInLastHour\n    data !== undefined\n        ? averageThroughputInLastHour = data\n            .filter(item => item.id == pid.id )\n            .filter(item =>\n                new Date(item.timestamp) > moment().subtract(1, 'h').toDate() &&\n                new Date(item.timestamp) < moment().toDate())\n            .reduce((acc, cur)=>((acc = acc + cur.averageThroughput), acc), 0)\n            /\n            data\n            .filter(item => item.id == pid.id )\n            .filter(item =>\n                new Date(item.timestamp) > moment().subtract(1, 'h').toDate() &&\n                new Date(item.timestamp) < moment().toDate()).length\n        : ''\n    const manualTara = () => {\n       // set the isNetto from last item to true\n        let newData = data\n            .filter(item => item.id == pid.id )\n            .filter(item =>\n                new Date(item.timestamp) > startDate &&\n                new Date(item.timestamp) < newEndDate)\n            .sort(function(a: any, b: any){\n                // @ts-ignore\n                return new Date(b.timestamp) - new Date(a.timestamp)\n            })\n        newData[0]['isNetWeight'] = 'true'\n        newData[0]['tareWeight'] = parseInt(newData[0]['indicateWeight'])\n        setData(newData)\n        updateStatus('Container tariert (3)');\n    }\n\n    const sendData = (responseBody: any) => {\n        API.put('https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/machines',\n            responseBody)\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    const updateStatus = (status: string) => {\n        let responseBody = machinesData[0]\n        responseBody.status = status\n        sendData(responseBody)\n    }\n\n    const refreshList = () => {\n        const apiName = 'https://8v9jqts989.execute-api.eu-central-1.amazonaws.com/items';\n\n        API.get(apiName)\n            .then((response) => {\n                setData(response.data.flat())\n            })\n            .catch((error) => {\n                console.log(error.response);\n            });\n    }\n\n    return(\n        <div id=\"content-page\" className=\"mx-10 p-10\">\n            <p className=\"text-3xl font-bold\">Übersicht</p>\n            <span className=\"text-sm font-bold\">Status Maschine</span>\n            <div className=\"text-sm flex\">\n                <div className=\"flex space-x-9 mt-4 mb-2\">\n                    <div className=\"flex space-x-2\">\n                        <span className=\"m-auto\">Von:</span>\n                        <DatePicker className=\"shadow-md border text-ce,nter p-0.5 w-full\"\n                                    dateFormat=\"yyyy/MM/dd\"\n                                    selected={startDate}\n                                    onChange={(date:Date) => setStartDate(date)}/>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                        <span className=\"m-auto\">Bis:</span>\n                        <DatePicker className=\"shadow-md border text-center p-0.5 m-0\"\n                                    dateFormat=\"yyyy/MM/dd\"\n                                    selected={endDate}\n                                    onChange={(date:Date) => setEndDate(date)}/>\n                    </div>\n                    <button className=\"p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\" onClick={()=>{refreshList()}}>Refresh</button>\n                </div>\n\n            </div>\n            <button className=\"my-3 mr-3 p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\">\n                Zeit seit Stellung: {\n                machinesData.length != 0 && machinesData[0].timeOfContainerTara != 0\n                    //TO-DO translate time outputs to german\n                    ? \"ca.\" + moment(machinesData[0].timeOfContainerTara).fromNow()\n                    : \"\"}</button>\n            <button className=\"my-3 mr-3 p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\">\n                Füllzeit seit Stellung: {\n                machinesData.length != 0 && machinesData[0].timeOfFillingStart != 0\n                    //TO-DO translate time outputs to german\n                ? \"ca.\" + moment(machinesData[0].timeOfFillingStart).fromNow()\n                : \"\"}</button>\n            <button className=\"my-3 mr-3 p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\">\n                Stillstand seit Produktionszeit: {\n                machinesData.length != 0 && machinesData[0].timeInStandstill != 0\n                    //TO-DO translate time outputs to german\n                    ? \" ca.\" + moment(machinesData[0].timeInStandstill).fromNow()\n                    : \"\"}</button>\n            <button className=\"my-3 mr-3 p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\">\n                Letzte Befüllung: { machinesData.length != 0\n                  && machinesData[0].lastFilling != 0\n                    ? moment(machinesData[0].lastFilling).format('DD.MM.YYYY, HH:mm')\n                    : ''} {\n                machinesData.length != 0 && machinesData[0].lastFilling != 0\n                    //TO-DO translate time outputs to german\n                    ? \"(\" + moment(machinesData[0].lastFilling).fromNow() + \")\"\n                    : \"\"}</button>\n            <button className=\"my-3 mr-3 p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\">\n                Zeit seit Füllstart: { machinesData.length != 0 && machinesData[0].firstFilling != 0\n                    //TO-DO translate time outputs to german\n                    ? \"ca.\" + moment(machinesData[0].firstFilling).fromNow()\n                    : \" \"}</button>\n            <button className=\"my-3 mr-3 p-1 px-3.5 border-accent-color-1 bg-accent-color-4 hover:bg-accent-color-5\n                    sm:rounded-lg shadow-md border text-xs font-semibold\">\n                Geschwindigkeit letzte Stunde: { machinesData.length != 0 && machinesData[0].averageThroughput != 0\n                //TO-DO translate time outputs to german\n                //@ts-ignore\n                ? \"ca. \"  + parseInt(averageThroughputInLastHour) + \" kg/h\"\n                : \"ca. 0 kg/h\"}</button>\n\n            <div className=\"shadow-md border h-72 overflow-auto mt-5\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead className=\"sticky top-0 bg-white rounded-lg\">\n                    <tr className=\"text-xs text-gray-500 border-b text-left text-center\">\n                        <th className=\"font-normal\">Masch.-ID</th>\n                        <th className=\"font-normal\">Typ</th>\n                        <th className=\"font-normal\">Datum erfasst</th>\n                        <th className=\"font-normal\">Brutto</th>\n                        <th className=\"font-normal\">Tara (Log)</th>\n                        <th className=\"font-normal\">Tara (Masch)</th>\n                        <th className=\"font-normal\">Netto (Log)</th>\n                        <th className=\"font-normal\">Netto (Masch)</th>\n                        <th className=\"font-normal\">kg/h</th>\n                        <th className=\"font-normal\">Warenart</th>\n                        <th className=\"font-normal\">Netto</th>\n                        <th className=\"font-normal\">Positiv</th>\n                        <th className=\"font-normal\">Übergew.</th>\n                        <th className=\"font-normal\">Stabil</th>\n                        <th className=\"font-normal\">Print</th>\n                        <th className=\"font-normal\">Printausgabe</th>\n                        <th className=\"font-normal\">Status Maschine</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50 text-center\">\n                    {data !== undefined\n                        ? data\n                            .filter(item => item.id == pid.id )\n                            .filter(item =>\n                                new Date(item.timestamp) > startDate &&\n                                new Date(item.timestamp) < newEndDate)\n                            .sort(function(a: any, b: any){\n                                // @ts-ignore\n                                return new Date(b.timestamp) - new Date(a.timestamp)\n                            })\n                            .map((item: any) =>\n                            <tr key={item.id} className=\"text-xs border-t\">\n                                <td>{item.id}</td>\n                                <td>{item.machineType}</td>\n                                <td>\n                                    {item.timestamp.slice(0,10)},\n                                    {item.timestamp.slice(10,16)}\n                                </td>\n                                <td>{parseInt(item.indicateWeight) + parseInt(item.tareWeight)} kg</td>\n                                <td>{parseInt(item.tareWeight)} kg</td>\n                                <td>{parseInt(item.tareWeight)} kg</td>\n                                <td>{parseInt(item.indicateWeight)} kg</td>\n                                <td>{parseInt(item.indicateWeight)} kg</td>\n                                <td>{item.averageThroughput ? item.averageThroughput.toFixed(2) : \"0\"}</td>\n                                <td></td>\n                                <td>\n                                    {\n                                        item.isNetWeight == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isPositiveWeight == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isOverweight == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isStable == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isPrintTriggered == \"true\"\n                                            ? \"Ja\"\n                                            : \"Nein\"\n                                    }\n                                </td>\n                                <td>{item.printContent}</td>\n                                <td>{item.status}</td>\n                            </tr>\n                        )\n                        : \"\"}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default MachineStorageHistory","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/edit-machine/[id].tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/new-machine.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/shift-calendar.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/shift-manager.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/annual-evaluation.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/annual-revenues.tsx",["208"],[],"import {useEffect, useState} from \"react\";\n\nconst revenues_2020 = [\n    {\n        product: \"Aluminium Späne, normal\",\n        weight: 46480,\n        value: 60024.07,\n        income: 60024.07,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Späne, nass\",\n        weight: 6860,\n        value: 8807.58,\n        income: 7310.29,\n        delta: -1497.29\n    },\n    {\n        product: \"Aluminium Profile AlSi1, Fe frei\",\n        weight: 50540,\n        value: 75635.31,\n        income: 75635.31,\n        delta: 0.00\n    },\n    {\n        product: \"Mischschrott mit Eisenanhaftung, Alu Anteil ca. 70 %\",\n        weight: 13780,\n        value: 2388.75,\n        income: 2370.67,\n        delta: -18.08\n    }\n]\nconst revenues_2021 = [\n    {\n        product: \"Eisenspäne\",\n        weight: 1060,\n        value: 275.28,\n        income: 275.28,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Späne, normal\",\n        weight: 112990,\n        value: 149397.55,\n        income: 149397.55,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Späne, nass\",\n        weight: 10030,\n        value: 6132.90,\n        income: 6132.90,\n        delta: 0.00\n    },\n    {\n        product: \"Aluminium Profile AlSi1, Fe frei\",\n        weight: 57990,\n        value: 99753.66,\n        income: 99753.66,\n        delta: 0.00\n    },\n    {\n        product: \"Mischschrott mit Eisenanhaftung, Alu Anteil ca. 70 %\",\n        weight: 31450,\n        value: 8435.58,\n        income: 7851.48,\n        delta: -584.10\n    }\n]\nconst revenues_2022 = [\n    {\n        product: \"Mischschrott\",\n        weight: 17170,\n        value: 4931.18,\n        income: 4931.18,\n        delta: 0\n    },\n    {\n        product: \"Eisenspäne\",\n        weight: 18510,\n        value: 4788.59,\n        income: 4762.91,\n        delta: -25.68\n    },\n    {\n        product: \"Aluminium Späne, normal\",\n        weight: 80250,\n        value: 142491.14,\n        income: 142028.53,\n        delta: -462.61\n    },\n    {\n        product: \"Aluminium Späne, nass\",\n        weight: 9770,\n        value: 6909.20,\n        income: 6909.20,\n        delta: 0\n    },\n    {\n        product: \"Aluminium Profile AlSi1, Fe frei\",\n        weight: 47790,\n        value: 100481.65,\n        income: 100647.85,\n        delta: 166.20\n    },\n]\n\nconst AnnualRevenues = () => {\n    const [currentYearString, setCurrentYearString] = useState(\"2020\")\n    const [currentYear, setCurrentYear] = useState(revenues_2020)\n    const [totalWeight, setTotalWeight] = useState( 0);\n    const [totalValue, setTotalValue] = useState( 0);\n    const [totalIncome, setTotalIncome] = useState( 0);\n    const [totalDelta, setTotalDelta] = useState( 0);\n\n    const calculateTotalWeight = ()  => {\n        let weight = 0\n\n            for (let product in currentYear) {\n                weight = (weight + currentYear[product].weight)\n            }\n        return weight;\n    }\n    const calculateTotalValue = ()  => {\n        let value = 0\n\n        for (let product in currentYear) {\n            value = (value + currentYear[product].value)\n        }\n        return value;\n    }\n    const calculateTotalIncome = ()  => {\n        let income = 0\n\n        for (let product in currentYear) {\n            income = (income + currentYear[product].income)\n        }\n        return income;\n    }\n    const calculateTotalDelta = ()  => {\n        let delta = 0\n\n        for (let product in currentYear) {\n            delta = (delta + currentYear[product].delta)\n        }\n        return delta;\n    }\n\n    useEffect(() => {\n        let weight = calculateTotalWeight()\n        setTotalWeight(weight)\n        let income = calculateTotalIncome()\n        setTotalIncome(income)\n        let value = calculateTotalValue()\n        setTotalValue(value)\n        let delta = calculateTotalDelta()\n        setTotalDelta(delta)\n\n    }, [currentYear]);\n\n    return(\n        <div id=\"content-page\" className=\"px-20\">\n            <p className=\"mt-9 text-3xl font-bold mb-5\">Jahreserlöse {currentYearString}</p>\n            <div className=\"mb-2.5\">\n                <span onClick={()=>{setCurrentYear(revenues_2020);setCurrentYearString(\"2020\")}}\n                      className=\"text-sm cursor-pointer underline m-1\">2020</span>|\n                <span onClick={()=>{setCurrentYear(revenues_2021);setCurrentYearString(\"2021\")}}\n                      className=\"text-sm cursor-pointer underline m-1\">2021</span>|\n                <span onClick={()=>{setCurrentYear(revenues_2022);setCurrentYearString(\"2022\")}}\n                      className=\"text-sm cursor-pointer underline m-1\">2022</span>\n            </div>\n\n            <div className=\"sm:rounded-lg shadow-md border\">\n                <table className=\"flex-row w-full table-auto\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th className=\"font-normal\">Warenart</th>\n                        <th className=\"text-right font-normal\">Werksgewicht</th>\n                        <th className=\"text-right font-normal\">Betrag Werksgewicht</th>\n                        <th className=\"text-right font-normal\">Betrag erhalten</th>\n                        <th className=\"text-right font-normal\">Delta</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50\">\n                    {currentYear.map((year) =>\n                        <tr key={year.product} className=\"text-xs border-t\">\n                            <td>{year.product}</td>\n                            <td className=\"text-right\">{year.weight}</td>\n                            <td className=\"text-right\">{year.value} €</td>\n                            <td className=\"text-right\">{year.income} €</td>\n                            <td className=\"text-right\">{year.delta} €</td>\n                        </tr>\n                        )}\n                    <tr>\n                        <td colSpan={5}>\n                            <hr/>\n                        </td>\n                    </tr>\n                    <tr className=\"text-xs\">\n                        <td/>\n                        <td className=\"text-right\">\n                            {totalWeight}\n                        </td>\n                        <td className=\"text-right\">\n                            {totalValue} €\n                        </td>\n                        <td className=\"text-right\">\n                            {totalIncome} €\n                        </td>\n                        <td className=\"text-right\">\n                            {totalDelta.toFixed(2)} €\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default AnnualRevenues","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/co2-evaluation.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting/control-documents.tsx",["209","210","211","212"],[],"const machineList = [\n    {\n        machine: 7000,\n        pdf: \"\",\n        weigh: \"10000-10069\",\n        date: \"01/15/2020 11:32 AM\",\n        goods: \"-\",\n        gross: \"\",\n        tare: 1546,\n        net: -1546,\n        service_life: \"287.19h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: -0.31,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 7000,\n        pdf: \"\",\n        weigh: \"10000-10068\",\n        date: \"01/15/2020 11:32 AM\",\n        goods: \"-\",\n        gross: 130,\n        tare: \"\",\n        net: 130,\n        service_life: \"6,089.98h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 0.03,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 7000,\n        pdf: \"\",\n        weigh: \"10000-10059\",\n        date: \"05/13/2019, 6:23 PM\",\n        goods: \"-\",\n        gross: 1994,\n        tare: 1546,\n        net: 448,\n        service_life: \"49.75h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 19.82,\n        note: \"Weighing Steel Frames Fa Sachs\",\n        certificate: \"\"\n    },\n    {\n        machine: 8000,\n        pdf: \"\",\n        weigh: \"10000-10033\",\n        date: \"28.04.2017, 17:22\",\n        goods: \"-\",\n        gross: 12000,\n        tare: 1290,\n        net: 9360,\n        service_life: \"7,45h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 1256.38,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 8000,\n        pdf: \"\",\n        weigh: \"10000-10033\",\n        date: \"28.04.2017, 17:22\",\n        goods: \"-\",\n        gross: 12000,\n        tare: 1290,\n        net: 9360,\n        service_life: \"7,45h\",\n        prod_time: \"0.00h\",\n        kg_per_hour: 1256.38,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 8030,\n        pdf: \"\",\n        weigh: \"10000-10081\",\n        date: \"05.10.2022, 17:38\",\n        goods: \"Eisenspäne\",\n        gross: 2470,\n        tare: 2470,\n        net: \"\",\n        service_life: \"175,18h\",\n        prod_time: \"126,88h\",\n        kg_per_hour: 0.00,\n        note: \"\",\n        certificate: \"\"\n    },\n    {\n        machine: 12345,\n        pdf: \"\",\n        weigh: \"10000-10080\",\n        date: \"18.05.2022, 14:45\",\n        goods: \"Eisenspäne, gebrochen ESB\",\n        gross: 5010,\n        tare: 2340,\n        net: 2670,\n        service_life: \"0,64h\",\n        prod_time: \"0,30h\",\n        kg_per_hour: 8949.72,\n        note: \"\",\n        certificate: \"\"\n    },\n]\n\nconst ControlDocuments = () => {\n    return(\n        <div id=\"content-page\" className=\"px-20\">\n            <p className=\"mt-9 text-3xl font-bold mb-10\">Kontrollbelege</p>\n            <div className=\"sm:rounded-lg shadow-md border overflow-x-auto\">\n                <table className=\"table-auto w-full\">\n                    <thead>\n                    <tr className=\"text-xs text-gray-500 border-b text-left\">\n                        <th className=\"font-normal\">Maschine</th>\n                        <th className=\"font-normal\">PDF</th>\n                        <th className=\"font-normal\">Wiegenr.</th>\n                        <th className=\"font-normal\">Datum</th>\n                        <th className=\"font-normal\">Warenart</th>\n                        <th className=\"font-normal\">Bruttogewitcht</th>\n                        <th className=\"font-normal\">Taragewitcht</th>\n                        <th className=\"font-normal\">Nettogewicht</th>\n                        <th className=\"font-normal\">Standzeit</th>\n                        <th className=\"font-normal\">Prod.-<br/>Zeit</th>\n                        <th className=\"font-normal\">kg / h</th>\n                        <th className=\"font-normal\">Bemerkung</th>\n                        <th className=\"font-normal\">W.<br/>Schein</th>\n                    </tr>\n                    </thead>\n                    <tbody className=\"bg-gray-50\">\n                    {machineList.map((machine) =>\n                        <tr key={machine.machine} className=\"text-xs border-t\">\n                            <td>{machine.machine}</td>\n                            <td><img className=\"h-5\" src=\"/download-svgrepo-com.svg\"/></td>\n                            <td>{machine.weigh.slice(0,6)}<br/>{machine.weigh.slice(6,12)}</td>\n                            <td>{machine.date.slice(0,10).replaceAll(\"/\",\".\")}</td>\n                            <td>{machine.goods}</td>\n                            <td>{machine.gross}</td>\n                            <td>{machine.tare}</td>\n                            <td>{machine.net}</td>\n                            <td>{machine.service_life}</td>\n                            <td>{machine.prod_time}</td>\n                            <td>{machine.kg_per_hour}</td>\n                            <td>{machine.note}</td>\n                            <td><img className=\"h-5\" src=\"/upload-svgrepo-com.svg\"/></td>\n                        </tr>\n                    )}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default ControlDocuments","/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/reporting.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/storage-systems.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/edit-worker/[user].tsx",["213"],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/new-worker.tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/[client].tsx",["214"],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/master-data/edit-client/[client].tsx",[],[],"/Users/adrianbrodzinski/Desktop/new-mcs-frontend/frontent-aws/pages/pdf.tsx",[],[],{"ruleId":"215","severity":1,"message":"216","line":34,"column":7,"nodeType":"217","endLine":34,"endColumn":9,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":56,"column":13,"nodeType":"221","endLine":56,"endColumn":66},{"ruleId":"222","severity":1,"message":"223","line":56,"column":13,"nodeType":"221","endLine":56,"endColumn":66},{"ruleId":"219","severity":1,"message":"220","line":6,"column":20,"nodeType":"221","endLine":6,"endColumn":77},{"ruleId":"219","severity":1,"message":"220","line":10,"column":21,"nodeType":"221","endLine":10,"endColumn":99},{"ruleId":"222","severity":1,"message":"223","line":10,"column":21,"nodeType":"221","endLine":10,"endColumn":99},{"ruleId":"219","severity":1,"message":"220","line":52,"column":37,"nodeType":"221","endLine":52,"endColumn":90},{"ruleId":"222","severity":1,"message":"223","line":52,"column":37,"nodeType":"221","endLine":52,"endColumn":90},{"ruleId":"219","severity":1,"message":"220","line":92,"column":29,"nodeType":"221","endLine":96,"endColumn":28},{"ruleId":"222","severity":1,"message":"223","line":92,"column":29,"nodeType":"221","endLine":96,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":137,"column":25,"nodeType":"221","endLine":137,"endColumn":62},{"ruleId":"222","severity":1,"message":"223","line":137,"column":25,"nodeType":"221","endLine":137,"endColumn":62},{"ruleId":"219","severity":1,"message":"220","line":151,"column":25,"nodeType":"221","endLine":151,"endColumn":55},{"ruleId":"222","severity":1,"message":"223","line":151,"column":25,"nodeType":"221","endLine":151,"endColumn":55},{"ruleId":"219","severity":1,"message":"220","line":468,"column":63,"nodeType":"221","endLine":468,"endColumn":117},{"ruleId":"222","severity":1,"message":"223","line":468,"column":63,"nodeType":"221","endLine":468,"endColumn":117},{"ruleId":"219","severity":1,"message":"220","line":471,"column":71,"nodeType":"221","endLine":471,"endColumn":125},{"ruleId":"222","severity":1,"message":"223","line":471,"column":71,"nodeType":"221","endLine":471,"endColumn":125},{"ruleId":"219","severity":1,"message":"220","line":479,"column":63,"nodeType":"221","endLine":479,"endColumn":117},{"ruleId":"222","severity":1,"message":"223","line":479,"column":63,"nodeType":"221","endLine":479,"endColumn":117},{"ruleId":"219","severity":1,"message":"220","line":482,"column":67,"nodeType":"221","endLine":482,"endColumn":114},{"ruleId":"222","severity":1,"message":"223","line":482,"column":67,"nodeType":"221","endLine":482,"endColumn":114},{"ruleId":"215","severity":1,"message":"224","line":42,"column":7,"nodeType":"217","endLine":42,"endColumn":27,"suggestions":"225"},{"ruleId":"215","severity":1,"message":"226","line":159,"column":8,"nodeType":"217","endLine":159,"endColumn":21,"suggestions":"227"},{"ruleId":"219","severity":1,"message":"220","line":136,"column":33,"nodeType":"221","endLine":136,"endColumn":87},{"ruleId":"222","severity":1,"message":"223","line":136,"column":33,"nodeType":"221","endLine":136,"endColumn":87},{"ruleId":"219","severity":1,"message":"220","line":147,"column":33,"nodeType":"221","endLine":147,"endColumn":85},{"ruleId":"222","severity":1,"message":"223","line":147,"column":33,"nodeType":"221","endLine":147,"endColumn":85},{"ruleId":"215","severity":1,"message":"228","line":35,"column":8,"nodeType":"217","endLine":35,"endColumn":13,"suggestions":"229"},{"ruleId":"215","severity":1,"message":"230","line":82,"column":30,"nodeType":"231","endLine":82,"endColumn":52},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data.land_id' and 'pid.client_id'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLand' needs the current value of 'data.land_id'.","ArrayExpression",["232"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'pid.id'. Either include it or remove the dependency array.",["233"],"React Hook useEffect has missing dependencies: 'calculateTotalDelta', 'calculateTotalIncome', 'calculateTotalValue', and 'calculateTotalWeight'. Either include them or remove the dependency array.",["234"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["235"],"Assignments to the 'SHIFT_CALENDAR' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [data.land_id, pid.client_id]",{"range":"244","text":"245"},"Update the dependencies array to be: [startDate, endDate, pid.id]",{"range":"246","text":"247"},"Update the dependencies array to be: [calculateTotalDelta, calculateTotalIncome, calculateTotalValue, calculateTotalWeight, currentYear]",{"range":"248","text":"249"},"Update the dependencies array to be: [data, pid]",{"range":"250","text":"251"},[1191,1193],"[data.land_id, pid.client_id]",[1429,1449],"[startDate, endDate, pid.id]",[3817,3830],"[calculateTotalDelta, calculateTotalIncome, calculateTotalValue, calculateTotalWeight, currentYear]",[1515,1520],"[data, pid]"]